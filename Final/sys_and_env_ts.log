INFO:polytope.polytope:will use `cvxopt.glpk` solver
INFO:omega.symbolic.bdd.slugs_logger:lex: tokens   = ['NOT', 'AND', 'OR', 'XOR', 'DOLLAR', 'QUESTION', 'FORALL', 'EXISTS', 'RENAME', 'DIV', 'NAME', 'NUMBER']
INFO:omega.symbolic.bdd.slugs_logger:lex: literals = ''
INFO:omega.symbolic.bdd.slugs_logger:lex: states   = {'INITIAL': 'inclusive'}
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_NAME -> '[A-Za-z_][A-Za-z0-9_']*' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_NUMBER -> '[-]*\d+' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_FORALL -> '\\A' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_EXISTS -> '\\E' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_RENAME -> '\\S' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_DOLLAR -> '\$' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_NOT -> '\!' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_QUESTION -> '\?' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_AND -> '\&' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_OR -> '\|' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_XOR -> '\^' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: Adding rule t_DIV -> '/' (state 'INITIAL')
INFO:omega.symbolic.bdd.slugs_logger:lex: ==== MASTER REGEXS FOLLOW ====
INFO:omega.symbolic.bdd.slugs_logger:lex: state 'INITIAL' : regex[0] = '(?P<t_NAME>[A-Za-z_][A-Za-z0-9_']*)|(?P<t_NUMBER>[-]*\d+)|(?P<t_FORALL>\\A)|(?P<t_EXISTS>\\E)|(?P<t_RENAME>\\S)|(?P<t_DOLLAR>\$)|(?P<t_NOT>\!)|(?P<t_QUESTION>\?)|(?P<t_AND>\&)|(?P<t_OR>\|)|(?P<t_XOR>\^)|(?P<t_DIV>/)'
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X0 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X0 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X1 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X2 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X2 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X3 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X4 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X5 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X6 ---> X3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X6 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X7 ---> X4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X8 ---> X7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: X8 ---> X5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X0
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X0
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['home'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['home'])})
type definitions: {'ap': PowerSet(MathSet(['obsX3', 'obsX1', 'obsX7', 'goal', 'obsX5', 'home']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X8
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X8
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['goal'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['goal'])})
type definitions: {'ap': PowerSet(MathSet(['obsX3', 'obsX1', 'obsX7', 'goal', 'obsX5', 'home']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X1
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X1
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX1'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX1'])})
type definitions: {'ap': PowerSet(MathSet(['obsX3', 'obsX1', 'obsX7', 'goal', 'obsX5', 'home']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X5
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X5
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX5'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX5'])})
type definitions: {'ap': PowerSet(MathSet(['obsX3', 'obsX1', 'obsX7', 'goal', 'obsX5', 'home']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X3
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X3
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX3'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX3'])})
type definitions: {'ap': PowerSet(MathSet(['obsX3', 'obsX1', 'obsX7', 'goal', 'obsX5', 'home']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: X7
DEBUG:tulip.transys.labeled_graphs:Graph already has node: X7
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obsX7'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obsX7'])})
type definitions: {'ap': PowerSet(MathSet(['obsX3', 'obsX1', 'obsX7', 'goal', 'obsX5', 'home']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set([])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set([])})
type definitions: {'ap': PowerSet(MathSet([]) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: a
DEBUG:tulip.transys.labeled_graphs:Graph already has node: a
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obs1'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obs1'])})
type definitions: {'ap': PowerSet(MathSet(['obs4', 'obs2', 'obs3', 'obs1']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: b
DEBUG:tulip.transys.labeled_graphs:Graph already has node: b
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obs2'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obs2'])})
type definitions: {'ap': PowerSet(MathSet(['obs4', 'obs2', 'obs3', 'obs1']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: c
DEBUG:tulip.transys.labeled_graphs:Graph already has node: c
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obs3'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obs3'])})
type definitions: {'ap': PowerSet(MathSet(['obs4', 'obs2', 'obs3', 'obs1']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:State already exists.
DEBUG:tulip.transys.labeled_graphs:Adding new id: d
DEBUG:tulip.transys.labeled_graphs:Graph already has node: d
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({'ap': set(['obs4'])})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'ap': set(['obs4'])})
type definitions: {'ap': PowerSet(MathSet(['obs4', 'obs2', 'obs3', 'obs1']) )}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: a ---> b
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: b ---> c
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: c ---> d
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: d ---> c
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {'sys_actions': MathSet([]), 'env_actions': MathSet([])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: c ---> a
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:__main__:----------------------------------------
Finite Transition System (open): 
----------------------------------------
Atomic Propositions (APs):
MathSet(['obs4', 'obs2', 'obs3', 'obs1'])

States labeled with sets of APs:
	 State: a, AP: set(['obs1'])
	 State: c, AP: set(['obs3'])
	 State: b, AP: set(['obs2'])
	 State: d, AP: set(['obs4'])


Initial States:
SubSet(['a'])

System Action Type: sys_actions, with possible values: MathSet([])
MathSet([])

Environment Action Type: env_actions, with possible values:
	MathSet([])
MathSet([])

Transitions labeled with sys and env actions:
[  ('a', 'b', {  }),
   ('c', 'a', {  }),
   ('c', 'd', {  }),
   ('b', 'c', {  }),
   ('d', 'c', {  })]
----------------------------------------

INFO:tulip.synth:sys.state_varname undefined. Will use the default variable name: "loc".
DEBUG:tulip.synth:action_type:
	sys_actions
with codomain:
	MathSet([])
DEBUG:tulip.synth:Found sys action
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:Updating sys_action_ids with:
	{}
DEBUG:tulip.synth:action_type:
	env_actions
with codomain:
	MathSet([])
DEBUG:tulip.synth:Found env action
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:Updating env_action_ids with:
	{}
DEBUG:tulip.synth:mapping domain: States:
['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']
	to expression understood by a GR(1) solver.
DEBUG:tulip.synth:options for modeling actions:
	mutex: True
	min_one: True
DEBUG:tulip.synth:states not modeled as Booleans
DEBUG:tulip.synth:all states are strings
DEBUG:tulip.synth:for tulip variable: loc
the map from [tulip action values] ---> [solver expressions] is:
		{'X8': 'loc = "X8"', 'X2': 'loc = "X2"', 'X3': 'loc = "X3"', 'X0': 'loc = "X0"', 'X1': 'loc = "X1"', 'X6': 'loc = "X6"', 'X7': 'loc = "X7"', 'X4': 'loc = "X4"', 'X5': 'loc = "X5"'}
DEBUG:tulip.synth:modeling sys transitions in logic
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X8, the available transitions are:
	[('X8', 'X7', {}), ('X8', 'X5', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X7, with state_id: loc = "X7", has post-conditions: ['X(loc = "X7")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X5, with state_id: loc = "X5", has post-conditions: ['X(loc = "X5")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X2, the available transitions are:
	[('X2', 'X1', {}), ('X2', 'X5', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X1, with state_id: loc = "X1", has post-conditions: ['X(loc = "X1")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X5, with state_id: loc = "X5", has post-conditions: ['X(loc = "X5")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X3, the available transitions are:
	[('X3', 'X0', {}), ('X3', 'X6', {}), ('X3', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X0, with state_id: loc = "X0", has post-conditions: ['X(loc = "X0")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X6, with state_id: loc = "X6", has post-conditions: ['X(loc = "X6")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X0, the available transitions are:
	[('X0', 'X3', {}), ('X0', 'X1', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X3, with state_id: loc = "X3", has post-conditions: ['X(loc = "X3")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X1, with state_id: loc = "X1", has post-conditions: ['X(loc = "X1")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X1, the available transitions are:
	[('X1', 'X2', {}), ('X1', 'X0', {}), ('X1', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X2, with state_id: loc = "X2", has post-conditions: ['X(loc = "X2")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X0, with state_id: loc = "X0", has post-conditions: ['X(loc = "X0")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X6, the available transitions are:
	[('X6', 'X3', {}), ('X6', 'X7', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X3, with state_id: loc = "X3", has post-conditions: ['X(loc = "X3")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X7, with state_id: loc = "X7", has post-conditions: ['X(loc = "X7")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X7, the available transitions are:
	[('X7', 'X8', {}), ('X7', 'X6', {}), ('X7', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X8, with state_id: loc = "X8", has post-conditions: ['X(loc = "X8")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X6, with state_id: loc = "X6", has post-conditions: ['X(loc = "X6")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X4, the available transitions are:
	[('X4', 'X3', {}), ('X4', 'X1', {}), ('X4', 'X7', {}), ('X4', 'X5', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X3, with state_id: loc = "X3", has post-conditions: ['X(loc = "X3")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X1, with state_id: loc = "X1", has post-conditions: ['X(loc = "X1")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X7, with state_id: loc = "X7", has post-conditions: ['X(loc = "X7")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X5, with state_id: loc = "X5", has post-conditions: ['X(loc = "X5")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:from state: X5, the available transitions are:
	[('X5', 'X2', {}), ('X5', 'X8', {}), ('X5', 'X4', {})]
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X2, with state_id: loc = "X2", has post-conditions: ['X(loc = "X2")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X8, with state_id: loc = "X8", has post-conditions: ['X(loc = "X8")', '', '', '', '', '']
DEBUG:tulip.synth:label = {}
DEBUG:tulip.synth:previous = set([])
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:guard to state: X4, with state_id: loc = "X4", has post-conditions: ['X(loc = "X4")', '', '', '', '', '']
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:next_env_actions: 
DEBUG:tulip.synth:sys TS:
ENVIRONMENT VARIABLES:
	(none)

SYSTEM VARIABLES:
	loc	['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']
	goal	boolean
	obsX3	boolean
	obsX1	boolean
	obsX7	boolean
	obsX5	boolean
	home	boolean

FORMULA:
ASSUMPTION:
GUARANTEE:
    INITIAL
	  ((loc = "X0"))
	& (!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))
	& (!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))
	& (!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))
	& (!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))
    SAFETY
	  []((loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))))
	& []((loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))))
	& []((loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))))
	& []((loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))))
	& []((loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))))
	& [](X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)))
	& [](X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)))
	& [](X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)))
	& [](X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)))

------------------------------------------------------------
INFO:tulip.synth:env.state_varname undefined. Will use the default variable name: "eloc".
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:empty container, so empty dict for solver expr
DEBUG:tulip.synth:mapping domain: States:
['a', 'c', 'b', 'd']
	to expression understood by a GR(1) solver.
DEBUG:tulip.synth:options for modeling actions:
	mutex: True
	min_one: True
DEBUG:tulip.synth:states not modeled as Booleans
DEBUG:tulip.synth:all states are strings
DEBUG:tulip.synth:for tulip variable: eloc
the map from [tulip action values] ---> [solver expressions] is:
		{'a': 'eloc = "a"', 'c': 'eloc = "c"', 'b': 'eloc = "b"', 'd': 'eloc = "d"'}
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.transys.labeled_graphs:Any label is allowed.
DEBUG:tulip.transys.labeled_graphs:Transition label matched desired label.
DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'env_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:conjunction of actions: {}
DEBUG:tulip.synth:mapping to solver equivalents: {'sys_actions': {}}
DEBUG:tulip.synth:actions_dict empty, returning empty string

DEBUG:tulip.synth:env TS:
ENVIRONMENT VARIABLES:
	obs4	boolean
	obs1	boolean
	obs2	boolean
	eloc	['a', 'c', 'b', 'd']
	obs3	boolean

SYSTEM VARIABLES:
	(none)

FORMULA:
ASSUMPTION:
    INITIAL
	  ((eloc = "a"))
	& (!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3))
	& (!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1))
	& (!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1))
	& (!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1))
    SAFETY
	  [](((eloc = "a")) -> (((X(eloc = "b")))))
	& [](((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d")))))
	& [](((eloc = "b")) -> (((X(eloc = "c")))))
	& [](((eloc = "d")) -> (((X(eloc = "c")))))
	& [](X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3)))
	& [](X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1)))
	& [](X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1)))
	& [](X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1)))
GUARANTEE:

------------------------------------------------------------
INFO:tulip.synth:Overall Spec:
ENVIRONMENT VARIABLES:
	obs4	boolean
	obs2	boolean
	eloc	['a', 'c', 'b', 'd']
	obs3	boolean
	obs1	boolean

SYSTEM VARIABLES:
	loc	['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']
	goal	boolean
	obsX3	boolean
	obsX1	boolean
	obsX7	boolean
	obsX5	boolean
	home	boolean

FORMULA:
ASSUMPTION:
    INITIAL
	  ((eloc = "a"))
	& (!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3))
	& (!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1))
	& (!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1))
	& (!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1))
    SAFETY
	  [](((eloc = "a")) -> (((X(eloc = "b")))))
	& [](((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d")))))
	& [](((eloc = "b")) -> (((X(eloc = "c")))))
	& [](((eloc = "d")) -> (((X(eloc = "c")))))
	& [](X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3)))
	& [](X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1)))
	& [](X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1)))
	& [](X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1)))
GUARANTEE:
    INITIAL
	  (home)
	& ((loc = "X0"))
	& (!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))
	& (!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))
	& (!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))
	& (!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
	& (!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))
    SAFETY
	  [](((obs2) -> X (!obsX3)))
	& [](((obs1) -> X (!obsX1)))
	& [](((obs4) -> X (!obsX7)))
	& [](((obs3) -> X (!obsX5)))
	& []((loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))))
	& []((loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))))
	& []((loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))))
	& []((loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))))
	& []((loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))))
	& []((loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))))
	& []((loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))))
	& [](X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)))
	& [](X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)))
	& [](X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)))
	& [](X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)))
	& [](X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)))
    LIVENESS
	  []<>(home)
	& []<>(goal)

------------------------------------------------------------
INFO:tulip.spec.form:convert string variables to integers...
DEBUG:tulip.spec.form:home is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{}



DEBUG:tulip.spec.form:check if: home, is in cache.
INFO:tulip.spec.form:AST cache does not contain:
	home
Need to parse.
INFO:tulip.spec.form:parsing ASTs to cache them...
DEBUG:tulip.spec.form:parse: home
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NAME,'home',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NAME . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d70510> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Var @ 0x105d70510> (Var('home'))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X0")
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d706d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105d70650> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d704d0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105d704d0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d704d0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Comparator @ 0x105d704d0> (Comparator('=', Var('loc'), Str('X0')))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d70710> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105e41ed0> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105e41d10> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105e41d10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105e41d10> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105e41d10>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105e41d10> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x105e41d10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e41e50> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'goal',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d70750> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105e41d90> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e41cd0> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('goal'),'&',<Unary @ 0x105e41cd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e4a090> (Binary('&', Var('goal'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105e4abd0> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e4ad10> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105e4a090>,'&',<Unary @ 0x105e4ad10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e4ab50> (Binary('&', Binary('&', Var('goal'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105e4acd0> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e5bcd0> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105e4ab50>,'&',<Unary @ 0x105e5bcd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e5bed0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105e5bf50> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e5bdd0> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105e5bed0>,'&',<Unary @ 0x105e5bdd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e5be50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105e5be90> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e5bd10> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105e5be50>,'&',<Unary @ 0x105e5bd10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e5bd50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x105e5bd50>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e5bd50> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105e41e50>,'|',<Binary @ 0x105e5bd50>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e41fd0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x105e41fd0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d70610> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105e5bd90> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105e5be10> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105e5be10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105e5be10> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105e5be10>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105e5be10> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x105e5be10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e5bf10> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NOT,'!',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT . LexToken(NAME,'obsX3',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT NAME . LexToken(AND,'&',1,27)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105e5bfd0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT expr . LexToken(AND,'&',1,27)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105e5bf90> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55090> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d551d0> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x105e5bf90>,'&',<Unary @ 0x105d551d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55190> (Binary('&', Unary('!', Var('obsX3')), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55050> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55290> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55190>,'&',<Unary @ 0x105d55290>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55150> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55210> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55390> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55150>,'&',<Unary @ 0x105d55390>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55350> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55250> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55490> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55350>,'&',<Unary @ 0x105d55490>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55450> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,66)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55310> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d554d0> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55450>,'&',<Unary @ 0x105d554d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55550> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x105d55550>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55550> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105e5bf10>,'|',<Binary @ 0x105d55550>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105e5bc90> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x105e5bc90> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105e41c90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105d55650> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d55690> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105d55690>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d55690> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105d55690>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d55690> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x105d55690>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55510> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obsX3',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d553d0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55410> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55590> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX3'),'&',<Unary @ 0x105d55590>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d556d0> (Binary('&', Var('obsX3'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d555d0> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55790> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d556d0>,'&',<Unary @ 0x105d55790>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d557d0> (Binary('&', Binary('&', Var('obsX3'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55750> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d558d0> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d557d0>,'&',<Unary @ 0x105d558d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55890> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55810> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55950> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55890>,'&',<Unary @ 0x105d55950>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55990> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55850> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55a10> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55990>,'&',<Unary @ 0x105d55a10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55a90> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x105d55a90>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55a90> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105d55510>,'|',<Binary @ 0x105d55a90>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d552d0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x105d552d0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55110> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105d55b90> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d55bd0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105d55bd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d55bd0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105d55bd0>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105d55bd0> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x105d55bd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55b50> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'home',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55910> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55610> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55a50> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('home'),'&',<Unary @ 0x105d55a50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55b10> (Binary('&', Var('home'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55ad0> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55cd0> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55b10>,'&',<Unary @ 0x105d55cd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55d10> (Binary('&', Binary('&', Var('home'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55c90> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55e10> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55d10>,'&',<Unary @ 0x105d55e10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55dd0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55d50> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55e90> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55dd0>,'&',<Unary @ 0x105d55e90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55ed0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55d90> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55f50> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105d55ed0>,'&',<Unary @ 0x105d55f50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55fd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x105d55fd0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55fd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105d55b50>,'|',<Binary @ 0x105d55fd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105d55c10> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x105d55c10> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55710> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105d55f90> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105ede0d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105ede0d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105ede0d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105ede0d0>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105ede0d0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x105ede0d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105d55f10> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obsX1',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55e50> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d559d0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede090> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX1'),'&',<Unary @ 0x105ede090>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede050> (Binary('&', Var('obsX1'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede110> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede250> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede050>,'&',<Unary @ 0x105ede250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede290> (Binary('&', Binary('&', Var('obsX1'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede210> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede390> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede290>,'&',<Unary @ 0x105ede390>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede350> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede2d0> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede410> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede350>,'&',<Unary @ 0x105ede410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede450> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede310> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede4d0> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede450>,'&',<Unary @ 0x105ede4d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede550> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x105ede550>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede550> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105d55f10>,'|',<Binary @ 0x105ede550>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede150> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x105ede150> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105d55c50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105ede650> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105ede690> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105ede690>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105ede690> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105ede690>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105ede690> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x105ede690>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede610> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NOT,'!',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT . LexToken(NAME,'obsX3',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT NAME . LexToken(AND,'&',1,27)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede3d0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT expr . LexToken(AND,'&',1,27)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede590> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede190> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede750> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x105ede590>,'&',<Unary @ 0x105ede750>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede510> (Binary('&', Unary('!', Var('obsX3')), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede5d0> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede810> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede510>,'&',<Unary @ 0x105ede810>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede490> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede790> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105ede910> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede490>,'&',<Unary @ 0x105ede910>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede8d0> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede7d0> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edea10> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede8d0>,'&',<Unary @ 0x105edea10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede9d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,66)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede890> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edea50> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105ede9d0>,'&',<Unary @ 0x105edea50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105edead0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x105edead0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105edead0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105ede610>,'|',<Binary @ 0x105edead0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede6d0> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x105ede6d0> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede1d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x105edebd0> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105edec10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105edec10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105edec10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x105edec10>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x105edec10> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x105edec10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edea90> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obsX7',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede950> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede990> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edeb10> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX7'),'&',<Unary @ 0x105edeb10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105edec50> (Binary('&', Var('obsX7'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105edeb50> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105eded10> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105edec50>,'&',<Unary @ 0x105eded10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105eded50> (Binary('&', Binary('&', Var('obsX7'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105edecd0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edee50> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105eded50>,'&',<Unary @ 0x105edee50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105edee10> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105eded90> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edeed0> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105edee10>,'&',<Unary @ 0x105edeed0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105edef10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ededd0> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edef90> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x105edef10>,'&',<Unary @ 0x105edef90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105edefd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x105edefd0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105edefd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105edea90>,'|',<Binary @ 0x105edefd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x105ede850> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x105ede850> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105ede710> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10602b050> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602b110> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10602b110>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602b110> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10602b110>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602b110> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x10602b110>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edef50> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NOT,'!',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT . LexToken(NAME,'obsX3',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT NAME . LexToken(AND,'&',1,27)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105edee90> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NOT expr . LexToken(AND,'&',1,27)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x105edeb90> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b1d0> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b250> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x105edeb90>,'&',<Unary @ 0x10602b250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b0d0> (Binary('&', Unary('!', Var('obsX3')), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b090> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b310> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,47)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602b0d0>,'&',<Unary @ 0x10602b310>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b150> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b290> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b410> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602b150>,'&',<Unary @ 0x10602b410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b3d0> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b2d0> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b510> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,66)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602b3d0>,'&',<Unary @ 0x10602b510>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b4d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,66)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b390> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b550> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602b4d0>,'&',<Unary @ 0x10602b550>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b5d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602b5d0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b5d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x105edef50>,'|',<Binary @ 0x10602b5d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b190> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10602b190> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x105edec90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10602b6d0> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602b710> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10602b710>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602b710> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10602b710>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602b710> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x10602b710>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b590> (Unary('!', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obsX5',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b450> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b490> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b610> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX5'),'&',<Unary @ 0x10602b610>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b750> (Binary('&', Var('obsX5'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b650> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b810> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602b750>,'&',<Unary @ 0x10602b810>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b850> (Binary('&', Binary('&', Var('obsX5'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b7d0> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b950> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602b850>,'&',<Unary @ 0x10602b950>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b910> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'goal',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b890> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602b9d0> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602b910>,'&',<Unary @ 0x10602b9d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602ba10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b8d0> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602ba90> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602ba10>,'&',<Unary @ 0x10602ba90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bb10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602bb10>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bb10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10602b590>,'|',<Binary @ 0x10602bb10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602b350> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10602b350> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((obs2) -> X (!obsX3))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'obs2',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(RPAREN,')',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b210> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',Var('obs2'),')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b210> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(IMP,'->',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP . LexToken(NEXT,'X',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT . LexToken(LPAREN,'(',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN . LexToken(NOT,'!',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT . LexToken(NAME,'obsX3',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT NAME . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602bbd0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT expr . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602ba50> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr . LexToken(RPAREN,')',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10602ba50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602ba50> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Unary @ 0x10602ba50>] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bc50> (Unary('X', Unary('!', Var('obsX3'))))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [Var('obs2'),'->',<Unary @ 0x10602bc50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bb90> (Binary('->', Var('obs2'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602bb90>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bb90> (Binary('->', Var('obs2'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10602bb90> (Binary('->', Var('obs2'), Unary('X', Una ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((obs1) -> X (!obsX1))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'obs1',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(RPAREN,')',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b790> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',Var('obs1'),')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b790> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(IMP,'->',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP . LexToken(NEXT,'X',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT . LexToken(LPAREN,'(',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN . LexToken(NOT,'!',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT . LexToken(NAME,'obsX1',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT NAME . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602bad0> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT expr . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bd90> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr . LexToken(RPAREN,')',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10602bd90>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bd90> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Unary @ 0x10602bd90>] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bcd0> (Unary('X', Unary('!', Var('obsX1'))))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [Var('obs1'),'->',<Unary @ 0x10602bcd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bd10> (Binary('->', Var('obs1'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602bd10>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bd10> (Binary('->', Var('obs1'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10602bd10> (Binary('->', Var('obs1'), Unary('X', Una ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((obs4) -> X (!obsX7))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'obs4',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(RPAREN,')',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b990> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',Var('obs4'),')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b990> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(IMP,'->',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP . LexToken(NEXT,'X',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT . LexToken(LPAREN,'(',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN . LexToken(NOT,'!',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT . LexToken(NAME,'obsX7',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT NAME . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602bc10> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT expr . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bed0> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr . LexToken(RPAREN,')',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10602bed0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bed0> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Unary @ 0x10602bed0>] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602be10> (Unary('X', Unary('!', Var('obsX7'))))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [Var('obs4'),'->',<Unary @ 0x10602be10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602be50> (Binary('->', Var('obs4'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602be50>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602be50> (Binary('->', Var('obs4'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10602be50> (Binary('->', Var('obs4'), Unary('X', Una ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((obs3) -> X (!obsX5))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'obs3',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(RPAREN,')',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b690> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',Var('obs3'),')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602b690> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(IMP,'->',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP . LexToken(NEXT,'X',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT . LexToken(LPAREN,'(',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN . LexToken(NOT,'!',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT . LexToken(NAME,'obsX5',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT NAME . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602bc90> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN NOT expr . LexToken(RPAREN,')',1,20)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bf10> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr . LexToken(RPAREN,')',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10602bf10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bf10> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP NEXT expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Unary @ 0x10602bf10>] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602bf50> (Unary('X', Unary('!', Var('obsX5'))))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr IMP expr . LexToken(RPAREN,')',1,21)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [Var('obs3'),'->',<Unary @ 0x10602bf50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bf90> (Binary('->', Var('obs3'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602bf90>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602bf90> (Binary('->', Var('obs3'), Unary('X', Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10602bf90> (Binary('->', Var('obs3'), Unary('X', Una ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602bb50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10602be90> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c090> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c090>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c090> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602bdd0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10602bfd0> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c150> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c150>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c150> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603c150>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c210> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c210>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c210> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c210>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c210> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c0d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603c250> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c050> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c050>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c050> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603c050>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c2d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c2d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c2d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c2d0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c2d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10603c210>,'|',<Unary @ 0x10603c2d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c310> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10603c310>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c310> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10603c090>,'->',<Binary @ 0x10603c310>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c190> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10603c190> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x104b8c390> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603c4d0> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c490> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c490>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c490> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c3d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603c590> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c450> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c450>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c450> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603c450>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c550> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c550>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c550> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c550>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c550> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c350> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603c410> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c290> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c290>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c290> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603c290>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c610> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c610>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c610> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c610>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c610> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10603c550>,'|',<Unary @ 0x10603c610>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c650> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10603c650>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c650> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10603c490>,'->',<Binary @ 0x10603c650>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c390> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10603c390> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c110> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603c810> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c7d0> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c7d0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c7d0> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c710> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603c8d0> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c790> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c790>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c790> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603c790>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c890> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c890>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c890> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c890>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c890> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c690> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603c750> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c5d0> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603c5d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603c5d0> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603c5d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c950> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c950>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c950> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c950>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c950> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10603c890>,'|',<Unary @ 0x10603c950>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c990> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c910> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603ca90> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cb90> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603cb90>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cb90> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603cb90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c850> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c850>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c850> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603c850>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603c850> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x10603c990>,'|',<Unary @ 0x10603c850>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603cad0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10603cad0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603cad0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10603c7d0>,'->',<Binary @ 0x10603cad0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603c6d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10603c6d0> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c1d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603cc90> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cc50> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603cc50>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cc50> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603ca10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603cd50> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cc10> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603cc10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cc10> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603cc10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603cd10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603cd10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603cd10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603cd10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603cd10> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603cb10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603cbd0> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603ca50> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603ca50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603ca50> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603ca50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603cdd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603cdd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603cdd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10603cdd0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10603cdd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10603cd10>,'|',<Unary @ 0x10603cdd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603ce10> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10603ce10>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603ce10> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10603cc50>,'->',<Binary @ 0x10603ce10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603cb50> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10603cb50> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c510> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603cfd0> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cf90> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603cf90>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cf90> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603ced0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603cf10> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cf50> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10603cf50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10603cf50> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10603cf50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c090> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c090>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c090> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c090>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c090> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603ce50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10603cd90> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c210> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c210>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c210> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600c210>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c150> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c150>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c150> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c150>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c150> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10600c090>,'|',<Unary @ 0x10600c150>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c190> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c110> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600c290> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c390> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c390>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c390> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600c390>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c050> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c050>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c050> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c050>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c050> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x10600c190>,'|',<Unary @ 0x10600c050>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c2d0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10600c2d0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c2d0> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10603cf90>,'->',<Binary @ 0x10600c2d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10603ce90> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10603ce90> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603c9d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600c490> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c450> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c450>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c450> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c0d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600c550> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c410> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c410>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c410> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600c410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c510> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c510>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c510> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c510>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c510> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c310> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600c3d0> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c250> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c250>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c250> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600c250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c5d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c5d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c5d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c5d0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c5d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10600c510>,'|',<Unary @ 0x10600c5d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c610> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10600c610>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c610> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10600c450>,'->',<Binary @ 0x10600c610>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c350> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10600c350> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10603ccd0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600c7d0> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c790> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c790>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c790> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c6d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600c890> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c750> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c750>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c750> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600c750>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c850> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c850>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c850> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c850>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c850> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c650> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600c710> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c590> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600c590>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600c590> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600c590>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c910> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c910>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c910> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c910>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c910> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10600c850>,'|',<Unary @ 0x10600c910>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c950> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c8d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600ca50> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cb50> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600cb50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cb50> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600cb50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c810> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c810>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c810> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600c810>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600c810> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x10600c950>,'|',<Unary @ 0x10600c810>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600ca90> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10600ca90>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600ca90> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10600c790>,'->',<Binary @ 0x10600ca90>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600c690> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10600c690> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c1d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600cc50> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cc10> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600cc10>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cc10> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c9d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600cd10> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cbd0> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600cbd0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cbd0> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600cbd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600ccd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600ccd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600ccd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600ccd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600ccd0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600cad0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600cb90> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600ca10> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600ca10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600ca10> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600ca10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600cd90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600cd90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600cd90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600cd90>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600cd90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10600ccd0>,'|',<Unary @ 0x10600cd90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600cdd0> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600cd50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600ced0> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cfd0> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10600cfd0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10600cfd0> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10600cfd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600cc90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600cc90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600cc90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,77)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10600cc90>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10600cc90> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,77)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x10600cdd0>,'|',<Unary @ 0x10600cc90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600cf10> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,77)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,80)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,81)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,82)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,83)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,84)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,88)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600ce90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,88)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,90)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,91)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,93)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,94)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600ce50> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,94)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020150> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,94)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,95)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106020150>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020150> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,95)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x106020150>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060200d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,95)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,96)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x1060200d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060200d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,96)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,97)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x1060200d0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060200d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,97)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x10600cf10>,'|',<Unary @ 0x1060200d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600ce10> (Binary('|', Binary('|', Binary('|', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,97)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10600ce10>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600ce10> (Binary('|', Binary('|', Binary('|', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10600cc10>,'->',<Binary @ 0x10600ce10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10600cb10> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10600cb10> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'loc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,5)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c4d0> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,5)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10600cf90> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x1060201d0> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x1060201d0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x1060201d0> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,17)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600cf50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106020310> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,31)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020110> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106020110>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020110> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,32)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x106020110>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060202d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x1060202d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060202d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x1060202d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060202d0> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020210> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106020190> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,52)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020250> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106020250>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020250> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,53)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x106020250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020390> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x106020390>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020390> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x106020390>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020390> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(OR,'|',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x1060202d0>,'|',<Unary @ 0x106020390>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060203d0> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,60)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,61)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,62)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'loc',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,67)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020350> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,70)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x1060204d0> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x1060205d0> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x1060205d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x1060205d0> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x1060205d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020290> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,75)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x106020290>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020290> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,75)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x106020290>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020290> (Unary('X', Comparator('=', Var('loc'), S ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,76)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Binary @ 0x1060203d0>,'|',<Unary @ 0x106020290>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020510> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,76)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106020510>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020510> (Binary('|', Binary('|', Unary('X', Compa ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x1060201d0>,'->',<Binary @ 0x106020510>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020090> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x106020090> (Binary('->', Comparator('=', Var('loc'), ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10600c990> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X8',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X8','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106020490> (Str('X8'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X8')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020410> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106020410>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020410> (Comparator('=', Var('loc'), Str('X8')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'goal',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020650> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020610> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020790> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('goal'),'&',<Unary @ 0x106020790>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020690> (Binary('&', Var('goal'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020550> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020810> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020690>,'&',<Unary @ 0x106020810>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020850> (Binary('&', Binary('&', Var('goal'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x1060207d0> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020950> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020850>,'&',<Unary @ 0x106020950>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020910> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020890> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060209d0> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020910>,'&',<Unary @ 0x1060209d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020a10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x1060208d0> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020a90> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020a10>,'&',<Unary @ 0x106020a90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020b10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106020b10>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020b10> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106020410>,'->',<Binary @ 0x106020b10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020750> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106020750>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020750> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106020750>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060206d0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x1060206d0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020050> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X2',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X2','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106020b50> (Str('X2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X2')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020a50> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106020a50>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106020a50> (Comparator('=', Var('loc'), Str('X2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NOT,'!',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT . LexToken(NAME,'obsX3',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020ad0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT expr . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020c90> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020990> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020d50> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x106020c90>,'&',<Unary @ 0x106020d50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020590> (Binary('&', Unary('!', Var('obsX3')), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020d10> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020e10> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020590>,'&',<Unary @ 0x106020e10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020b90> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020d90> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020f10> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020b90>,'&',<Unary @ 0x106020f10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020ed0> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020dd0> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020f90> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020ed0>,'&',<Unary @ 0x106020f90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020fd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020e90> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020f50> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106020fd0>,'&',<Unary @ 0x106020f50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a150> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602a150>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a150> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106020a50>,'->',<Binary @ 0x10602a150>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020cd0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106020cd0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106020cd0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106020cd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020710> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x106020710> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020450> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X3',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X3','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10602a090> (Str('X3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602a2d0> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10602a2d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602a2d0> (Comparator('=', Var('loc'), Str('X3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obsX3',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a190> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a250> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a110> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX3'),'&',<Unary @ 0x10602a110>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a210> (Binary('&', Var('obsX3'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a0d0> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a350> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a210>,'&',<Unary @ 0x10602a350>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a390> (Binary('&', Binary('&', Var('obsX3'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a310> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a490> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a390>,'&',<Unary @ 0x10602a490>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a450> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a3d0> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a510> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a450>,'&',<Unary @ 0x10602a510>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a550> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a410> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a5d0> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a550>,'&',<Unary @ 0x10602a5d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a650> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602a650>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a650> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10602a2d0>,'->',<Binary @ 0x10602a650>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a1d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602a1d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a1d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x10602a1d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106020bd0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x106020bd0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020c10> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X0',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X0','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10602a690> (Str('X0'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X0')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602a590> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10602a590>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602a590> (Comparator('=', Var('loc'), Str('X0')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'home',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a610> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a4d0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a810> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('home'),'&',<Unary @ 0x10602a810>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a050> (Binary('&', Var('home'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a7d0> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a890> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,44)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a050>,'&',<Unary @ 0x10602a890>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a8d0> (Binary('&', Binary('&', Var('home'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a850> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a9d0> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a8d0>,'&',<Unary @ 0x10602a9d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a990> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a910> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602aa50> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,63)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a990>,'&',<Unary @ 0x10602aa50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602aa90> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,63)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,66)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a950> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602ab10> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602aa90>,'&',<Unary @ 0x10602ab10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602ab90> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602ab90>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602ab90> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10602a590>,'->',<Binary @ 0x10602ab90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a6d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602a6d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a6d0> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x10602a6d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a290> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x10602a290> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106020e50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X1',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X1','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10602abd0> (Str('X1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X1')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602aad0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10602aad0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10602aad0> (Comparator('=', Var('loc'), Str('X1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obsX1',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602ab50> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602aa10> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602ad50> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX1'),'&',<Unary @ 0x10602ad50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602a790> (Binary('&', Var('obsX1'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602ad10> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602add0> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602a790>,'&',<Unary @ 0x10602add0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602ae10> (Binary('&', Binary('&', Var('obsX1'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602ad90> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602af10> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602ae10>,'&',<Unary @ 0x10602af10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602aed0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602ae50> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602af90> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602aed0>,'&',<Unary @ 0x10602af90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602afd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602ae90> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602af50> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10602afd0>,'&',<Unary @ 0x10602af50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060310d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x1060310d0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060310d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10602aad0>,'->',<Binary @ 0x1060310d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602ac10> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10602ac10>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10602ac10> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x10602ac10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602a710> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x10602a710> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602a750> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X6',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X6','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106031090> (Str('X6'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X6')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106031250> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106031250>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106031250> (Comparator('=', Var('loc'), Str('X6')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NOT,'!',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT . LexToken(NAME,'obsX3',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031110> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT expr . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031290> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031150> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031310> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x106031290>,'&',<Unary @ 0x106031310>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031210> (Binary('&', Unary('!', Var('obsX3')), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x1060312d0> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060313d0> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031210>,'&',<Unary @ 0x1060313d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060311d0> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031350> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060314d0> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x1060311d0>,'&',<Unary @ 0x1060314d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031490> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031390> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060315d0> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031490>,'&',<Unary @ 0x1060315d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031590> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031450> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031610> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031590>,'&',<Unary @ 0x106031610>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031690> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106031690>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031690> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106031250>,'->',<Binary @ 0x106031690>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031190> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106031190>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031190> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106031190>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10602acd0> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x10602acd0> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602ac90> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X7',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X7','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106031410> (Str('X7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X7')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106031650> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106031650>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106031650> (Comparator('=', Var('loc'), Str('X7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obsX7',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031710> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x1060317d0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060316d0> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX7'),'&',<Unary @ 0x1060316d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031050> (Binary('&', Var('obsX7'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031850> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060318d0> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031050>,'&',<Unary @ 0x1060318d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031910> (Binary('&', Binary('&', Var('obsX7'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031890> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031a10> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031910>,'&',<Unary @ 0x106031a10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060319d0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031950> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031a90> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x1060319d0>,'&',<Unary @ 0x106031a90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031ad0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031990> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031b50> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031ad0>,'&',<Unary @ 0x106031b50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031bd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106031bd0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031bd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106031650>,'->',<Binary @ 0x106031bd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031750> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106031750>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031750> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106031750>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031550> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x106031550> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10602ac50> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X4',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X4','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106031c10> (Str('X4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X4')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106031b10> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106031b10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106031b10> (Comparator('=', Var('loc'), Str('X4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NOT,'!',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT . LexToken(NAME,'obsX3',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT NAME . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031b90> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NOT expr . LexToken(AND,'&',1,26)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031d50> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,26)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031a50> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031dd0> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Unary @ 0x106031d50>,'&',<Unary @ 0x106031dd0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031510> (Binary('&', Unary('!', Var('obsX3')), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031d90> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031e90> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,46)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031510>,'&',<Unary @ 0x106031e90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031c90> (Binary('&', Binary('&', Unary('!', Var(' ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031e10> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031f90> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031c90>,'&',<Unary @ 0x106031f90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031f50> (Binary('&', Binary('&', Binary('&', Unar ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX5',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031e50> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX5')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031ed0> (Unary('!', Var('obsX5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,65)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031f50>,'&',<Unary @ 0x106031ed0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031fd0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,65)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,69)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031f10> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e110> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106031fd0>,'&',<Unary @ 0x10605e110>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e190> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10605e190>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e190> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,74)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106031b10>,'->',<Binary @ 0x10605e190>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031c50> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,74)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106031c50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106031c50> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106031c50>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106031810> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x106031810> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'loc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['loc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031790> (Var('loc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'X5',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','X5','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605e290> (Str('X5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('loc'),'=',Str('X5')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e150> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e150>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e150> (Comparator('=', Var('loc'), Str('X5')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obsX5',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX5'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e210> (Var('obsX5'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX3',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e2d0> (Var('obsX3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e1d0> (Unary('!', Var('obsX3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obsX5'),'&',<Unary @ 0x10605e1d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e0d0> (Binary('&', Var('obsX5'), Unary('!', Var ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX1',1,39)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e350> (Var('obsX1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e3d0> (Unary('!', Var('obsX1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,45)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10605e0d0>,'&',<Unary @ 0x10605e3d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e410> (Binary('&', Binary('&', Var('obsX5'), Un ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,48)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obsX7',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obsX7'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e390> (Var('obsX7'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obsX7')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e510> (Unary('!', Var('obsX7')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10605e410>,'&',<Unary @ 0x10605e510>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e4d0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,58)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'goal',1,59)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e450> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('goal')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e590> (Unary('!', Var('goal')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,64)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10605e4d0>,'&',<Unary @ 0x10605e590>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e5d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,64)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,67)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'home',1,68)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['home'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e490> (Var('home'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('home')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e650> (Unary('!', Var('home')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,72)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10605e5d0>,'&',<Unary @ 0x10605e650>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e6d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,72)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10605e6d0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e6d0> (Binary('&', Binary('&', Binary('&', Bina ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,73)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10605e150>,'->',<Binary @ 0x10605e6d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e250> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,73)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10605e250>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e250> (Binary('->', Comparator('=', Var('loc'), ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x10605e250>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e050> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x10605e050> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:home is already in cache
DEBUG:tulip.spec.form:parse: goal
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NAME,'goal',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NAME . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['goal'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031cd0> (Var('goal'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Var @ 0x106031cd0> (Var('goal'))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((eloc = "a")) -> (((X(eloc = "b"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'eloc',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106031d10> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'a',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','a','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605e310> (Str('a'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('a')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e610> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e610>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e610> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e610>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e610> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,22)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,23)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,28)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e690> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'b',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','b','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605e8d0> (Str('b'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('b')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e710> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e710>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e710> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10605e710>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e890> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605e890>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e890> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605e890>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e890> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605e890>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605e890> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10605e610>,'->',<Unary @ 0x10605e890>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e790> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10605e790> (Binary('->', Comparator('=', Var('eloc') ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'eloc',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e7d0> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'c',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','c','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605ea10> (Str('c'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('c')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e9d0> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e9d0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e9d0> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e9d0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e9d0> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,22)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,23)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,28)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e910> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'a',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','a','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605ead0> (Str('a'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('a')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e990> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e990>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e990> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10605e990>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605ea90> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605ea90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605ea90> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(OR,'|',1,37)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605ea90>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605ea90> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(OR,'|',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR . LexToken(LPAREN,'(',1,40)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN . LexToken(LPAREN,'(',1,41)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN . LexToken(NEXT,'X',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,44)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,49)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e850> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,49)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'d',1,52)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,53)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','d','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605e950> (Str('d'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,54)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('d')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e550> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,54)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605e550>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605e550> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,55)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10605e550>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605eb50> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr . LexToken(RPAREN,')',1,55)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,56)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605eb50>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605eb50> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr . LexToken(RPAREN,')',1,56)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR LPAREN expr RPAREN . LexToken(RPAREN,')',1,57)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605eb50>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605eb50> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr OR expr . LexToken(RPAREN,')',1,57)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10605ea90>,'|',<Unary @ 0x10605eb50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605eb90> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,57)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10605eb90>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605eb90> (Binary('|', Unary('X', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10605e9d0>,'->',<Binary @ 0x10605eb90>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605e810> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10605e810> (Binary('->', Comparator('=', Var('eloc') ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((eloc = "b")) -> (((X(eloc = "c"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'eloc',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e750> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'b',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','b','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605ecd0> (Str('b'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('b')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ebd0> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605ebd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ebd0> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605ebd0>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ebd0> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,22)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,23)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,28)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605ec50> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'c',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','c','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605ee10> (Str('c'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('c')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ed50> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605ed50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ed50> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10605ed50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605edd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605edd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605edd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605edd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605edd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605edd0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605edd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10605ebd0>,'->',<Unary @ 0x10605edd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605ec10> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10605ec10> (Binary('->', Comparator('=', Var('eloc') ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: ((eloc = "d")) -> (((X(eloc = "c"))))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN . LexToken(NAME,'eloc',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,7)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605ea50> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(EQUALS,'=',1,7)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'d',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','d','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605ef50> (Str('d'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,12)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('d')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ef10> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr . LexToken(RPAREN,')',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605ef10>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ef10> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605ef10>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605ef10> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN . LexToken(LPAREN,'(',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN . LexToken(NEXT,'X',1,21)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT . LexToken(LPAREN,'(',1,22)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN . LexToken(NAME,'eloc',1,23)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN NAME . LexToken(EQUALS,'=',1,28)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605ee50> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(EQUALS,'=',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,30)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES . LexToken(NAME,'c',1,31)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,32)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','c','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10605ee90> (Str('c'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('c')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605eed0> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr . LexToken(RPAREN,')',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT LPAREN expr RPAREN . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10605eed0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10605eed0> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN NEXT expr . LexToken(RPAREN,')',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Comparator @ 0x10605eed0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605efd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr . LexToken(RPAREN,')',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,35)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605efd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605efd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr . LexToken(RPAREN,')',1,35)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,36)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605efd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605efd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr . LexToken(RPAREN,')',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Unary @ 0x10605efd0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605efd0> (Unary('X', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : expr IMP expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x10605ef10>,'->',<Unary @ 0x10605efd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10605ec90> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10605ec90> (Binary('->', Comparator('=', Var('eloc') ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605ed90> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'a',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','a','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106044090> (Str('a'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('a')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044150> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106044150>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044150> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obs1',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605e090> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs4',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x1060440d0> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044250> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs1'),'&',<Unary @ 0x106044250>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044190> (Binary('&', Var('obs1'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs2',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044110> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060442d0> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106044190>,'&',<Unary @ 0x1060442d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044310> (Binary('&', Binary('&', Var('obs1'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs3',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044290> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044410> (Unary('!', Var('obs3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106044310>,'&',<Unary @ 0x106044410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060443d0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x1060443d0>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060443d0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106044150>,'->',<Binary @ 0x1060443d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044210> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106044210>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044210> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106044210>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10605ed10> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x10605ed10> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605ef90> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'c',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','c','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106044550> (Str('c'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('c')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044450> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106044450>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044450> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obs3',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044350> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs4',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044490> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044610> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs3'),'&',<Unary @ 0x106044610>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044050> (Binary('&', Var('obs3'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs2',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044510> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044690> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106044050>,'&',<Unary @ 0x106044690>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060446d0> (Binary('&', Binary('&', Var('obs3'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs1',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044650> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060447d0> (Unary('!', Var('obs1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x1060446d0>,'&',<Unary @ 0x1060447d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044790> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106044790>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044790> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106044450>,'->',<Binary @ 0x106044790>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060445d0> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x1060445d0>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060445d0> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x1060445d0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044390> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x106044390> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10605eb10> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'b',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','b','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106044910> (Str('b'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('b')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044810> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106044810>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044810> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obs2',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044710> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs4',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044850> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x1060449d0> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs2'),'&',<Unary @ 0x1060449d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x1060441d0> (Binary('&', Var('obs2'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs3',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x1060448d0> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044a50> (Unary('!', Var('obs3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x1060441d0>,'&',<Unary @ 0x106044a50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044a90> (Binary('&', Binary('&', Var('obs2'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs1',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044a10> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044b90> (Unary('!', Var('obs1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106044a90>,'&',<Unary @ 0x106044b90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044b50> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106044b50>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044b50> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106044810>,'->',<Binary @ 0x106044b50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044990> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106044990>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044990> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106044990>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044750> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x106044750> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NEXT,'X',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 5
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 5
DEBUG:tulip.ltl_parser_log:Stack  : NEXT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x1060444d0> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'d',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','d','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106044cd0> (Str('d'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('d')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044bd0> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN LPAREN expr RPAREN . LexToken(IMP,'->',1,15)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106044bd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044bd0> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(IMP,'->',1,15)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 33
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 33
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP . LexToken(LPAREN,'(',1,18)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN . LexToken(NAME,'obs4',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN NAME . LexToken(AND,'&',1,24)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044ad0> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,24)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,27)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs2',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044c10> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044d90> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,33)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs4'),'&',<Unary @ 0x106044d90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044590> (Binary('&', Var('obs4'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,33)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,36)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs3',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044c90> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044e10> (Unary('!', Var('obs3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(AND,'&',1,42)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106044590>,'&',<Unary @ 0x106044e10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044e50> (Binary('&', Binary('&', Var('obs4'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(AND,'&',1,42)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND . LexToken(NOT,'!',1,45)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT . LexToken(NAME,'obs1',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044dd0> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044f50> (Unary('!', Var('obs1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr AND expr . LexToken(RPAREN,')',1,50)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x106044e50>,'&',<Unary @ 0x106044f50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044f10> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr . LexToken(RPAREN,')',1,50)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP LPAREN expr RPAREN . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106044f10>,')'] and goto state 57
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044f10> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 57
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr IMP expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr IMP expr] with [<Comparator @ 0x106044bd0>,'->',<Binary @ 0x106044f10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044d50> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NEXT LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x106044d50>,')'] and goto state 16
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x106044d50> (Binary('->', Comparator('=', Var('eloc') ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 16
DEBUG:tulip.ltl_parser_log:Stack  : NEXT expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NEXT expr] with ['X',<Binary @ 0x106044d50>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044b10> (Unary('X', Binary('->', Comparator('=',  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Unary @ 0x106044b10> (Unary('X', Binary('->', Comparator('=',  ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: (eloc = "a")
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(LPAREN,'(',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN . LexToken(NAME,'eloc',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN NAME . LexToken(EQUALS,'=',1,6)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044890> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(EQUALS,'=',1,6)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES . LexToken(NAME,'a',1,9)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','a','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x106044ed0> (Str('a'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,11)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('a')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044950> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr . LexToken(RPAREN,')',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x106044950>,')'] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x106044950> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Comparator @ 0x106044950> (Comparator('=', Var('eloc'), Str('a')))
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044c50> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'a',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','a','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10604a050> (Str('a'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('a')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a110> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604a110>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a110> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604a110>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a110> (Comparator('=', Var('eloc'), Str('a')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x10604a110>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x106044d10> (Unary('!', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obs1',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044e90> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs4',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044f90> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a0d0> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs1'),'&',<Unary @ 0x10604a0d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a090> (Binary('&', Var('obs1'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a150> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a290> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604a090>,'&',<Unary @ 0x10604a290>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a2d0> (Binary('&', Binary('&', Var('obs1'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs3',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a250> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a3d0> (Unary('!', Var('obs3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604a2d0>,'&',<Unary @ 0x10604a3d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a390> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10604a390>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a390> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x106044d10>,'|',<Binary @ 0x10604a390>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a190> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10604a190> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x106044fd0> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'c',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','c','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10604a4d0> (Str('c'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('c')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a450> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604a450>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a450> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604a450>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a450> (Comparator('=', Var('eloc'), Str('c')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x10604a450>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a490> (Unary('!', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obs3',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a350> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs4',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a310> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a410> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs3'),'&',<Unary @ 0x10604a410>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a1d0> (Binary('&', Var('obs3'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs2',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a510> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a650> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604a1d0>,'&',<Unary @ 0x10604a650>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a690> (Binary('&', Binary('&', Var('obs3'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs1',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a610> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a790> (Unary('!', Var('obs1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604a690>,'&',<Unary @ 0x10604a790>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a750> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10604a750>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a750> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10604a490>,'|',<Binary @ 0x10604a750>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a590> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10604a590> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a210> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'b',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','b','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10604a890> (Str('b'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('b')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a810> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604a810>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a810> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604a810>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604a810> (Comparator('=', Var('eloc'), Str('b')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x10604a810>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a850> (Unary('!', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obs2',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a710> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs4',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a6d0> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs4')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604a7d0> (Unary('!', Var('obs4')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs2'),'&',<Unary @ 0x10604a7d0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a550> (Binary('&', Var('obs2'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs3',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a8d0> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604aa10> (Unary('!', Var('obs3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604a550>,'&',<Unary @ 0x10604aa10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604aa50> (Binary('&', Binary('&', Var('obs2'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs1',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a9d0> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604ab50> (Unary('!', Var('obs1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604aa50>,'&',<Unary @ 0x10604ab50>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604ab10> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10604ab10>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604ab10> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10604a850>,'|',<Binary @ 0x10604ab10>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a950> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10604a950> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
DEBUG:tulip.spec.form:parse: !((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG START
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 0
DEBUG:tulip.ltl_parser_log:Stack  : . LexToken(NOT,'!',1,0)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : NOT . LexToken(LPAREN,'(',1,1)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN . LexToken(LPAREN,'(',1,2)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN . LexToken(NAME,'eloc',1,3)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN NAME . LexToken(EQUALS,'=',1,8)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['eloc'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604a5d0> (Var('eloc'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(EQUALS,'=',1,8)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 31
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 31
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS . LexToken(DQUOTES,'"',1,10)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 4
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 4
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES . LexToken(NAME,'d',1,11)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 15
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 15
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME . LexToken(DQUOTES,'"',1,12)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 42
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 42
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS DQUOTES NAME DQUOTES . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> DQUOTES NAME DQUOTES] with ['"','d','"'] and goto state 55
INFO:tulip.ltl_parser_log:Result : <Str @ 0x10604ac50> (Str('d'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 55
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr EQUALS expr . LexToken(RPAREN,')',1,13)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr EQUALS expr] with [Var('eloc'),'=',Str('d')] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604abd0> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr . LexToken(RPAREN,')',1,13)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN LPAREN expr RPAREN . LexToken(RPAREN,')',1,14)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604abd0>,')'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604abd0> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr . LexToken(RPAREN,')',1,14)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : NOT LPAREN expr RPAREN . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Comparator @ 0x10604abd0>,')'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Comparator @ 0x10604abd0> (Comparator('=', Var('eloc'), Str('d')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : NOT expr . LexToken(OR,'|',1,16)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',<Comparator @ 0x10604abd0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604ac10> (Unary('!', Comparator('=', Var('eloc'),  ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . LexToken(OR,'|',1,16)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 39
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 39
DEBUG:tulip.ltl_parser_log:Stack  : expr OR . LexToken(LPAREN,'(',1,19)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 8
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 8
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN . LexToken(NAME,'obs4',1,20)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN NAME . LexToken(AND,'&',1,25)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs4'] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604aad0> (Var('obs4'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,25)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,28)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs2',1,29)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs2'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604aa90> (Var('obs2'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs2')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604ab90> (Unary('!', Var('obs2')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,34)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [Var('obs4'),'&',<Unary @ 0x10604ab90>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604a910> (Binary('&', Var('obs4'), Unary('!', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,34)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,37)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs3',1,38)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs3'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604ac90> (Var('obs3'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs3')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604add0> (Unary('!', Var('obs3')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(AND,'&',1,43)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604a910>,'&',<Unary @ 0x10604add0>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604ae10> (Binary('&', Binary('&', Var('obs4'), Una ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(AND,'&',1,43)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 38
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 38
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND . LexToken(NOT,'!',1,46)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 13
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 13
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT . LexToken(NAME,'obs1',1,47)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 10
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 10
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT NAME . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NAME] with ['obs1'] and goto state 41
INFO:tulip.ltl_parser_log:Result : <Var @ 0x10604ad90> (Var('obs1'))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 41
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND NOT expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> NOT expr] with ['!',Var('obs1')] and goto state 62
INFO:tulip.ltl_parser_log:Result : <Unary @ 0x10604af10> (Unary('!', Var('obs1')))
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 62
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr AND expr . LexToken(RPAREN,')',1,51)
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr AND expr] with [<Binary @ 0x10604ae10>,'&',<Unary @ 0x10604af10>] and goto state 18
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604aed0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 18
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr . LexToken(RPAREN,')',1,51)
DEBUG:tulip.ltl_parser_log:Action : Shift and goto state 43
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 43
DEBUG:tulip.ltl_parser_log:Stack  : expr OR LPAREN expr RPAREN . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> LPAREN expr RPAREN] with ['(',<Binary @ 0x10604aed0>,')'] and goto state 63
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604aed0> (Binary('&', Binary('&', Binary('&', Var( ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 63
DEBUG:tulip.ltl_parser_log:Stack  : expr OR expr . $end
INFO:tulip.ltl_parser_log:Action : Reduce rule [expr -> expr OR expr] with [<Unary @ 0x10604ac10>,'|',<Binary @ 0x10604aed0>] and goto state 11
INFO:tulip.ltl_parser_log:Result : <Binary @ 0x10604ad10> (Binary('|', Unary('!', Comparator('=', V ...)
DEBUG:tulip.ltl_parser_log:
DEBUG:tulip.ltl_parser_log:State  : 11
DEBUG:tulip.ltl_parser_log:Stack  : expr . $end
INFO:tulip.ltl_parser_log:Done   : Returning <Binary @ 0x10604ad10> (Binary('|', Unary('!', Comparator('=', V ...)
INFO:tulip.ltl_parser_log:PLY: PARSE DEBUG END
INFO:tulip.spec.form:collecting garbage from GRSpec cache...
INFO:tulip.spec.form:cleaned 0 cached elements.

INFO:tulip.spec.form:done parsing ASTs.

DEBUG:tulip.spec.form:(loc = "X0") is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X0"), is in cache.
DEBUG:tulip.spec.form:(loc = "X0") is already in cache
DEBUG:tulip.spec.form:!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home) is already in cache
DEBUG:tulip.spec.form:!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is already in cache
DEBUG:tulip.spec.form:!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is already in cache
DEBUG:tulip.spec.form:!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5), is in cache.
DEBUG:tulip.spec.form:!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5) is already in cache
DEBUG:tulip.spec.form:!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home) is already in cache
DEBUG:tulip.spec.form:!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is already in cache
DEBUG:tulip.spec.form:!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home) is already in cache
DEBUG:tulip.spec.form:!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is already in cache
DEBUG:tulip.spec.form:!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home), is in cache.
DEBUG:tulip.spec.form:!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home) is already in cache
DEBUG:tulip.spec.form:((obs2) -> X (!obsX3)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((obs2) -> X (!obsX3)), is in cache.
DEBUG:tulip.spec.form:((obs2) -> X (!obsX3)) is already in cache
DEBUG:tulip.spec.form:((obs1) -> X (!obsX1)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((obs1) -> X (!obsX1)), is in cache.
DEBUG:tulip.spec.form:((obs1) -> X (!obsX1)) is already in cache
DEBUG:tulip.spec.form:((obs4) -> X (!obsX7)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((obs4) -> X (!obsX7)), is in cache.
DEBUG:tulip.spec.form:((obs4) -> X (!obsX7)) is already in cache
DEBUG:tulip.spec.form:((obs3) -> X (!obsX5)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((obs3) -> X (!obsX5)), is in cache.
DEBUG:tulip.spec.form:((obs3) -> X (!obsX5)) is already in cache
DEBUG:tulip.spec.form:(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))) is already in cache
DEBUG:tulip.spec.form:(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))), is in cache.
DEBUG:tulip.spec.form:(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))) is already in cache
DEBUG:tulip.spec.form:X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is already in cache
DEBUG:tulip.spec.form:X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)), is in cache.
DEBUG:tulip.spec.form:X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)) is already in cache
DEBUG:tulip.spec.form:home is in _bool_int cache
DEBUG:tulip.spec.form:goal is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: goal, is in cache.
DEBUG:tulip.spec.form:goal is already in cache
DEBUG:tulip.spec.form:((eloc = "a")) -> (((X(eloc = "b")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((eloc = "a")) -> (((X(eloc = "b")))), is in cache.
DEBUG:tulip.spec.form:((eloc = "a")) -> (((X(eloc = "b")))) is already in cache
DEBUG:tulip.spec.form:((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d")))), is in cache.
DEBUG:tulip.spec.form:((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d")))) is already in cache
DEBUG:tulip.spec.form:((eloc = "b")) -> (((X(eloc = "c")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((eloc = "b")) -> (((X(eloc = "c")))), is in cache.
DEBUG:tulip.spec.form:((eloc = "b")) -> (((X(eloc = "c")))) is already in cache
DEBUG:tulip.spec.form:((eloc = "d")) -> (((X(eloc = "c")))) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ((eloc = "d")) -> (((X(eloc = "c")))), is in cache.
DEBUG:tulip.spec.form:((eloc = "d")) -> (((X(eloc = "c")))) is already in cache
DEBUG:tulip.spec.form:X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3)), is in cache.
DEBUG:tulip.spec.form:X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3)) is already in cache
DEBUG:tulip.spec.form:X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1)), is in cache.
DEBUG:tulip.spec.form:X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1)) is already in cache
DEBUG:tulip.spec.form:X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1)), is in cache.
DEBUG:tulip.spec.form:X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1)) is already in cache
DEBUG:tulip.spec.form:X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1)) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1)), is in cache.
DEBUG:tulip.spec.form:X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1)) is already in cache
DEBUG:tulip.spec.form:(eloc = "a") is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: (eloc = "a"), is in cache.
DEBUG:tulip.spec.form:(eloc = "a") is already in cache
DEBUG:tulip.spec.form:!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3), is in cache.
DEBUG:tulip.spec.form:!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3) is already in cache
DEBUG:tulip.spec.form:!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1), is in cache.
DEBUG:tulip.spec.form:!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1) is already in cache
DEBUG:tulip.spec.form:!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1), is in cache.
DEBUG:tulip.spec.form:!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1) is already in cache
DEBUG:tulip.spec.form:!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1) is not in _bool_int cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: !((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1), is in cache.
DEBUG:tulip.spec.form:!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1) is already in cache
INFO:tulip.spec.form:done converting to integer variables.

DEBUG:omega.logic.bitvector:int in (0, 8)
DEBUG:omega.logic.bitvector:int in (0, 3)
INFO:omega.logic.bitvector:-- done bitblasting vars table

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('eloc', var), Num('0', num)), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))), Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('eloc', var), Num('0', num)), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('eloc', var), Num('0', num)), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs1', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))), Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))), Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('3', num)))))), Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))), Comparator('<=', Unary('X', Var('eloc', var)), Num('3', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('3', num)))))), Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('3', num)))))), Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('3', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Unary('X', Comparator('=', Var('eloc', var), Num('2', num))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('3', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('eloc', var), Num('0', num))), Unary('X', Comparator('=', Var('eloc', var), Num('3', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 1 | ^ eloc_1' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))), Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 1 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Unary('X', Comparator('=', Var('eloc', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 1 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs1', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs1', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 1 | ^ eloc_1' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var))), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))), Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 0 | ^ eloc_1' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs2', var), Unary('!', Var('obs4', var))), Unary('!', Var('obs3', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs2', var), Unary('!', Var('obs4', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('eloc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0' 1 | ^ eloc_1' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var))), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))), Unary('!', Var('obs3', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))), Comparator('<=', Unary('X', Var('eloc', var)), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('eloc', var)), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '1', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '1', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '1', '0', '0']
q = ["eloc_0'", "eloc_1'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0' 1
1: | & 1 ! eloc_0' & ^ 1 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0' 1
1: | & 1 ! eloc_0' & ^ 1 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))), Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))), Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('home', var), Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('0', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('goal', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('1', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('2', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('3', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('home', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('4', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('5', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('5', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))), Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))), Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('6', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('7', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))), Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('!', Comparator('=', Var('loc', var), Num('8', num))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Unary('!', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX3', var)))), Binary('=>', Var('obs1', var), Unary('X', Unary('!', Var('obsX1', var))))), Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX7', var)))), Binary('=>', Var('obs3', var), Unary('X', Unary('!', Var('obsX5', var)))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))))))), Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))))), Binary('&', Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX3', var)))), Binary('=>', Var('obs1', var), Unary('X', Unary('!', Var('obsX1', var))))), Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX7', var)))), Binary('=>', Var('obs3', var), Unary('X', Unary('!', Var('obsX5', var)))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))))))), Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX3', var)))), Binary('=>', Var('obs1', var), Unary('X', Unary('!', Var('obsX1', var))))), Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX7', var)))), Binary('=>', Var('obs3', var), Unary('X', Unary('!', Var('obsX5', var)))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX3', var)))), Binary('=>', Var('obs1', var), Unary('X', Unary('!', Var('obsX1', var))))), Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX7', var)))), Binary('=>', Var('obs3', var), Unary('X', Unary('!', Var('obsX5', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX3', var)))), Binary('=>', Var('obs1', var), Unary('X', Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Var('obs2', var), Unary('X', Unary('!', Var('obsX3', var))))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Binary('=>', Var('obs1', var), Unary('X', Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX7', var)))), Binary('=>', Var('obs3', var), Unary('X', Unary('!', Var('obsX5', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Var('obs4', var), Unary('X', Unary('!', Var('obsX7', var))))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Binary('=>', Var('obs3', var), Unary('X', Unary('!', Var('obsX5', var))))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('6', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('4', num))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('3', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('5', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))), Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))))), Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('3', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('0', num))), Unary('X', Comparator('=', Var('loc', var), Num('5', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('5', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num)))), Unary('X', Comparator('=', Var('loc', var), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num)))), Unary('X', Comparator('=', Var('loc', var), Num('6', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('2', num))), Unary('X', Comparator('=', Var('loc', var), Num('4', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('4', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('6', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num)))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num)))), Unary('X', Comparator('=', Var('loc', var), Num('7', num))))"
INFO:omega.logic.bitvector:flatten "Binary('|', Unary('X', Comparator('=', Var('loc', var), Num('1', num))), Unary('X', Comparator('=', Var('loc', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Comparator('=', Var('loc', var), Num('7', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('0', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('goal', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('goal', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('1', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('2', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))), Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))), Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('3', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 0 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('home', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('home', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('4', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX1', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('5', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 0 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('6', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX7', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))), Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var))))))"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('7', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 1 | ^ loc_1' 1 | ^ loc_2' 1 | ^ loc_3' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('obsX5', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Unary('X', Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('=>', Comparator('=', Var('loc', var), Num('8', num)), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0' 0 | ^ loc_1' 0 | ^ loc_2' 0 | ^ loc_3' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var))), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var))), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var))), Unary('!', Var('obsX7', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var))), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX5', var), Unary('!', Var('obsX3', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
INFO:omega.symbolic.fixpoint:++ cinv
INFO:omega.symbolic.fixpoint:-- cinv
DEBUG:omega.logic.bitvector:int in (0, 8)
INFO:omega.logic.bitvector:"int" found as type (instead of "saturating")
DEBUG:omega.logic.bitvector:int in (0, 3)
INFO:omega.logic.bitvector:"int" found as type (instead of "saturating")
DEBUG:omega.logic.bitvector:int in (0, 1)
INFO:omega.logic.bitvector:-- done bitblasting vars table

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))), Comparator('<=', Unary('X', Var('eloc', var)), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num))), Comparator('<=', Num('0', num), Unary('X', Var('eloc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('eloc', var)), Comparator('<=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0 ! 0 1
1: | & eloc_0 ! 0 & ^ eloc_0 ! 0 1
2: ^ ^ eloc_1 ! 0 ? 1
3: | & eloc_1 ! 0 & ^ eloc_1 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '1', '0']
	 y = ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '1', '0', '0']
	 y = ['eloc_0', 'eloc_1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '1', '0', '0']
q = ['eloc_0', 'eloc_1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0 1
1: | & 1 ! eloc_0 & ^ 1 ! eloc_0 1
2: ^ ^ 1 ! eloc_1 ? 1
3: | & 1 ! eloc_1 & ^ 1 ! eloc_1 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('eloc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0']
q = ["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0', '0']
	 y = ['0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0', '0']
q = ['0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ eloc_0' ! 0 1
1: | & eloc_0' ! 0 & ^ eloc_0' ! 0 1
2: ^ ^ eloc_1' ! 0 ? 1
3: | & eloc_1' ! 0 & ^ eloc_1' ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('eloc', var)), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('eloc', var))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["eloc_0'", "eloc_1'", '0']
q = ['1', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '1', '0']
	 y = ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 4 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '1', '0', '0']
	 y = ["eloc_0'", "eloc_1'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '1', '0', '0']
q = ["eloc_0'", "eloc_1'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0' 1
1: | & 1 ! eloc_0' & ^ 1 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5

res = ['? 0', '? 2', '? 4', '? 6']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! eloc_0' 1
1: | & 1 ! eloc_0' & ^ 1 ! eloc_0' 1
2: ^ ^ 1 ! eloc_1' ? 1
3: | & 1 ! eloc_1' & ^ 1 ! eloc_1' ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ^ ^ 0 ! 0 ? 5
7: | & 0 ! 0 & ^ 0 ! 0 ? 5
8: ! ^ ! ^ 0 0 ? 7

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0']
q = ['_goal_0', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '0', '0']
	 y = ['_goal_0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '0', '0']
q = ['_goal_0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))), Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))), Comparator('<=', Num('0', num), Unary('X', Var('_goal', var)))), Comparator('<=', Unary('X', Var('_goal', var)), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))), Comparator('<=', Unary('X', Var('loc', var)), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num))), Comparator('<=', Num('0', num), Unary('X', Var('loc', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('loc', var)), Comparator('<=', Var('loc', var), Num('8', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0 ! 0 1
1: | & loc_0 ! 0 & ^ loc_0 ! 0 1
2: ^ ^ loc_1 ! 0 ? 1
3: | & loc_1 ! 0 & ^ loc_1 ! 0 ? 1
4: ^ ^ loc_2 ! 0 ? 3
5: | & loc_2 ! 0 & ^ loc_2 ! 0 ? 3
6: ^ ^ loc_3 ! 0 ? 5
7: | & loc_3 ! 0 & ^ loc_3 ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0 1
1: | & 0 ! loc_0 & ^ 0 ! loc_0 1
2: ^ ^ 0 ! loc_1 ? 1
3: | & 0 ! loc_1 & ^ 0 ! loc_1 ? 1
4: ^ ^ 0 ! loc_2 ? 3
5: | & 0 ! loc_2 & ^ 0 ! loc_2 ? 3
6: ^ ^ 1 ! loc_3 ? 5
7: | & 1 ! loc_3 & ^ 1 ! loc_3 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('loc', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
	 y = ['0', '0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
q = ['0', '0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ loc_0' ! 0 1
1: | & loc_0' ! 0 & ^ loc_0' ! 0 1
2: ^ ^ loc_1' ! 0 ? 1
3: | & loc_1' ! 0 & ^ loc_1' ! 0 ? 1
4: ^ ^ loc_2' ! 0 ? 3
5: | & loc_2' ! 0 & ^ loc_2' ! 0 ? 3
6: ^ ^ loc_3' ! 0 ? 5
7: | & loc_3' ! 0 & ^ loc_3' ! 0 ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('loc', var)), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('loc', var))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
q = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0', '0', '1', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 6 bits of: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0', '0', '1', '0', '0']
	 y = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0', '0', '1', '0', '0']
q = ["loc_0'", "loc_1'", "loc_2'", "loc_3'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9

res = ['? 0', '? 2', '? 4', '? 6', '? 8', '? 10']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 0 ! loc_0' 1
1: | & 0 ! loc_0' & ^ 0 ! loc_0' 1
2: ^ ^ 0 ! loc_1' ? 1
3: | & 0 ! loc_1' & ^ 0 ! loc_1' ? 1
4: ^ ^ 0 ! loc_2' ? 3
5: | & 0 ! loc_2' & ^ 0 ! loc_2' ? 3
6: ^ ^ 1 ! loc_3' ? 5
7: | & 1 ! loc_3' & ^ 1 ! loc_3' ? 5
8: ^ ^ 0 ! 0 ? 7
9: | & 0 ! 0 & ^ 0 ! 0 ? 7
10: ^ ^ 0 ! 0 ? 9
11: | & 0 ! 0 & ^ 0 ! 0 ? 9
12: ! ^ ! ^ 0 0 ? 11

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))), Comparator('<=', Num('0', num), Unary('X', Var('_goal', var)))), Comparator('<=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num))), Comparator('<=', Num('0', num), Unary('X', Var('_goal', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('<=', Num('0', num), Var('_goal', var)), Comparator('<=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0']
	 y = ['_goal_0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0']
q = ['_goal_0', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0 ! 0 1
1: | & _goal_0 ! 0 & ^ _goal_0 ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '0']
	 y = ['_goal_0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '0', '0']
	 y = ['_goal_0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '0', '0']
q = ['_goal_0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0 1
1: | & 1 ! _goal_0 & ^ 1 ! _goal_0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Num('0', num), Unary('X', Var('_goal', var)))"
INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['0', '0']
	 y = ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['0', '0']
	 y = ["_goal_0'", '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['0', '0']
q = ["_goal_0'", '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0' ! 0 1
1: | & _goal_0' ! 0 & ^ _goal_0' ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ _goal_0' ! 0 1
1: | & _goal_0' ! 0 & ^ _goal_0' ! 0 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Comparator('<=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "<=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
INFO:omega.logic.bitvector:++ subtract...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['1', '0']
	 y = ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['1', '0', '0']
	 y = ["_goal_0'", '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['1', '0', '0']
q = ["_goal_0'", '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0' 1
1: | & 1 ! _goal_0' & ^ 1 ! _goal_0' 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3

res = ['? 0', '? 2', '? 4']
INFO:omega.logic.bitvector:-- done subtracting

DEBUG:omega.logic.bitvector:mem = memory:
0: ^ ^ 1 ! _goal_0' 1
1: | & 1 ! _goal_0' & ^ 1 ! _goal_0' 1
2: ^ ^ 0 ! 0 ? 1
3: | & 0 ! 0 & ^ 0 ! 0 ? 1
4: ^ ^ 0 ! 0 ? 3
5: | & 0 ! 0 & ^ 0 ! 0 ? 3
6: ! ^ ! ^ 0 0 ? 5

DEBUG:omega.logic.bitvector:-- done flattening "<="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('0', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('1', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('0', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('1', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('0', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('_goal', var), Num('1', num)), Comparator('=', Unary('X', Var('_goal', var)), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Unary('X', Var('_goal', var)), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Unary('X', Var('_goal', var))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ["_goal_0'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["_goal_0'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["_goal_0'", '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ["_goal_0'", '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0' 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 3, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.games.enumeration:1 initial nodes
DEBUG:omega.games.enumeration:at node: {'loc': 3, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 2, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': True, 'loc': 2, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 2, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 5, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 5, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 5, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 6, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 6, 'obsX1': False, 'obsX7': True, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 6, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 6, 'obsX1': False, 'obsX7': True, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 6, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 0, 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 0, 'obsX1': False, 'obsX7': False, 'goal': True, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 0, 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 6, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 6, 'obsX1': False, 'obsX7': True, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 6, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('6', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('6', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('6', num)"
INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX7', var), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 6, 'obsX1': False, 'obsX7': True, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 6, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 5, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('5', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('5', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('5', num)"
INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 5, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 5, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "5" to 2s complement
INFO:omega.logic.bitvector:two's complement of "5" is:
	['1', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 2, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': True, 'loc': 2, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 2, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': True, 'loc': 2, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 2, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 3, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 3, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': True, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 3, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 7, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 7, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 7, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 6, 'obsX1': False, 'obsX7': True, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 6, 'obsX1': False, 'obsX7': True, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 1, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 8, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': True, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 8, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': True, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 8, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': True, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 0, 'goal': True, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 0, 'obsX1': False, 'obsX7': False, 'goal': True, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 0, 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 0, 'obsX1': False, 'obsX7': False, 'goal': True, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 0, 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 8, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': True, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 8, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': True, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 8, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': True, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 7, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 7, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 1, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 3, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': True, '_goal': 0}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 3, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 3, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': True, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 3, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 1, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 1, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 8, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': True, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 8, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': True, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 8, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': True, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 8, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': True, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 0, 'obsX1': False, 'obsX7': False, 'goal': True, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 7, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 2, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('2', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX3', var), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': True, 'loc': 2, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 2, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 3, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': True, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 0, 'goal': True, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 8, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': True, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('8', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('8', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('8', num)"
INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Var('obsX5', var), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Var('obsX5', var), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 8, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': True, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 8, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': True, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 1, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('1', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Var('obs3', var), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs3', var), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 1, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 1, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": False, "obs1'": True, "eloc'": 0}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var)), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 0, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:next_env: {"obs4'": True, "obs3'": False, "obs2'": False, "obs1'": False, "eloc'": 3}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 4, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var))), Binary('&', Var('obs4', var), Unary('!', Var('obs2', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('4', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('4', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('4', num)"
INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Var('obs4', var), Unary('!', Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('3', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['1', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 1 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 3, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 3, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': True, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 3, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('3', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('3', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('3', num)"
INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Var('home', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 3, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': True, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 3, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': True, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 2, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "3" to 2s complement
INFO:omega.logic.bitvector:two's complement of "3" is:
	['1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 3, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': True, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 6, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 7, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var))), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('7', num)), Unary('!', Var('goal', var)))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('7', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('7', num)"
INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['1', '1', '1', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 1 | ^ loc_1 1 | ^ loc_2 1 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Unary('!', Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('0', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 7, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 7, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 0}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "7" to 2s complement
INFO:omega.logic.bitvector:two's complement of "7" is:
	['1', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['1', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['1', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "4" to 2s complement
INFO:omega.logic.bitvector:two's complement of "4" is:
	['0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 4, 'obsX1': True, 'obsX7': False, 'goal': False, 'obsX5': False, 'home': False, '_goal': 0}

DEBUG:omega.games.enumeration:at node: {'loc': 6, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 0, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "6" to 2s complement
INFO:omega.logic.bitvector:two's complement of "6" is:
	['0', '1', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '1', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '1', '1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": False, "obs2'": True, "obs1'": False, "eloc'": 2}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.games.enumeration:cannot remain in visited nodes
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:{'loc': 0, 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))), Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))), Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var)), Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Comparator('=', Var('loc', var), Num('0', num)), Var('goal', var))"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('loc', var), Num('0', num))"
INFO:omega.logic.bitvector:flatten "Var('loc', var)"
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:flatten "Num('0', num)"
INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
q = ['0', '0', '0', '0', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ loc_0 0 | ^ loc_1 0 | ^ loc_2 0 | ^ loc_3 0 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Var('goal', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs4', var)), Var('obs2', var))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs4', var))"
INFO:omega.logic.bitvector:flatten "Var('obs4', var)"
INFO:omega.logic.bitvector:flatten "Var('obs2', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var))), Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obs3', var)), Unary('!', Var('obs1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs3', var))"
INFO:omega.logic.bitvector:flatten "Var('obs3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obs1', var))"
INFO:omega.logic.bitvector:flatten "Var('obs1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX3', var)), Unary('!', Var('obsX1', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX3', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX3', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX1', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX1', var)"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))), Comparator('=', Var('_goal', var), Num('1', num)))"
INFO:omega.logic.bitvector:flatten "Binary('&', Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num))), Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var))))"
INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX7', var)), Comparator('=', Var('eloc', var), Num('2', num)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX7', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX7', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('eloc', var), Num('2', num))"
INFO:omega.logic.bitvector:flatten "Var('eloc', var)"
INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:flatten "Num('2', num)"
INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['eloc_0', 'eloc_1', '0']
q = ['0', '1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ eloc_0 0 | ^ eloc_1 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

INFO:omega.logic.bitvector:flatten "Binary('&', Unary('!', Var('obsX5', var)), Unary('!', Var('home', var)))"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('obsX5', var))"
INFO:omega.logic.bitvector:flatten "Var('obsX5', var)"
INFO:omega.logic.bitvector:flatten "Unary('!', Var('home', var))"
INFO:omega.logic.bitvector:flatten "Var('home', var)"
INFO:omega.logic.bitvector:flatten "Comparator('=', Var('_goal', var), Num('1', num))"
INFO:omega.logic.bitvector:flatten "Var('_goal', var)"
INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:flatten "Num('1', num)"
INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ flatten comparator "=" ...
INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.logic.bitvector:p = ['_goal_0', '0']
q = ['1', '0']
DEBUG:omega.logic.bitvector:mem = memory:
0: ! | ^ _goal_0 1 | ^ 0 0 0

DEBUG:omega.logic.bitvector:-- done flattening "="

DEBUG:omega.games.enumeration:next env: {'eloc': 2, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False}
next sys: {'obsX3': False, 'loc': 0, 'obsX1': False, 'obsX7': False, 'goal': True, 'obsX5': False, 'home': False, '_goal': 1}

DEBUG:omega.games.enumeration:at node: {'loc': 0, 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False, '_goal': 1}
INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "2" to 2s complement
INFO:omega.logic.bitvector:two's complement of "2" is:
	['0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next_env: {"obs4'": False, "obs3'": True, "obs2'": False, "obs1'": False, "eloc'": 1}
INFO:omega.logic.bitvector:++ encode variable "eloc'" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc'": ["eloc_0'", "eloc_1'"]"
DEBUG:omega.logic.bitvector:variable "eloc'" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc'":
	["eloc_0'", "eloc_1'", '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc'".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ["eloc_0'", "eloc_1'", '0']
DEBUG:omega.logic.bitvector:-- result of extension: ["eloc_0'", "eloc_1'", '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ["eloc_0'", "eloc_1'", '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "loc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "loc": ['loc_0', 'loc_1', 'loc_2', 'loc_3']"
DEBUG:omega.logic.bitvector:variable "loc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "loc":
	['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
INFO:omega.logic.bitvector:-- done encoding variable "loc".

INFO:omega.logic.bitvector:++ convert integer "8" to 2s complement
INFO:omega.logic.bitvector:two's complement of "8" is:
	['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 5 bits of: ['0', '0', '0', '1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0', '0', '1', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['loc_0', 'loc_1', 'loc_2', 'loc_3', '0']
	 y = ['0', '0', '0', '1', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "eloc" to 2s complement
DEBUG:omega.logic.bitvector:bits of "eloc": ['eloc_0', 'eloc_1']"
DEBUG:omega.logic.bitvector:variable "eloc" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "eloc":
	['eloc_0', 'eloc_1', '0']
INFO:omega.logic.bitvector:-- done encoding variable "eloc".

INFO:omega.logic.bitvector:++ convert integer "1" to 2s complement
INFO:omega.logic.bitvector:two's complement of "1" is:
	['1', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['eloc_0', 'eloc_1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['eloc_0', 'eloc_1', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 3 bits of: ['1', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['1', '0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['eloc_0', 'eloc_1', '0']
	 y = ['1', '0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

INFO:omega.logic.bitvector:++ encode variable "_goal" to 2s complement
DEBUG:omega.logic.bitvector:bits of "_goal": ['_goal_0']"
DEBUG:omega.logic.bitvector:variable "_goal" has fixed sign
DEBUG:omega.logic.bitvector:encoded variable "_goal":
	['_goal_0', '0']
INFO:omega.logic.bitvector:-- done encoding variable "_goal".

INFO:omega.logic.bitvector:++ convert integer "0" to 2s complement
INFO:omega.logic.bitvector:two's complement of "0" is:
	['0', '0']
INFO:omega.logic.bitvector:-- done encoding int

INFO:omega.logic.bitvector:++ equalize width...
DEBUG:omega.logic.bitvector:before equalization:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['_goal_0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['_goal_0', '0']

DEBUG:omega.logic.bitvector:++ sign extension to 2 bits of: ['0', '0']
DEBUG:omega.logic.bitvector:-- result of extension: ['0', '0']

DEBUG:omega.logic.bitvector:after extension:
	 x = ['_goal_0', '0']
	 y = ['0', '0']
INFO:omega.logic.bitvector:-- done equalizing.

DEBUG:omega.games.enumeration:next env: {'eloc': 1, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False}
next sys: {'obsX3': False, 'loc': 8, 'obsX1': False, 'obsX7': False, 'goal': False, 'obsX5': True, 'home': False, '_goal': 0}

INFO:tulip.interfaces.omega:Winning set computed in 0.0561668872833 sec.
Symbolic strategy computed in 0.0739281177521 sec.
Strategy enumerated in 0.373587846756 sec.
INFO:tulip.synth:converting strategy (compact) to Mealy machine
DEBUG:tulip.transys.labeled_graphs:no label types passed
DEBUG:tulip.transys.labeled_graphs:no label types passed
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 0 ---> 1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 1, state: {'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 1 ---> 2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 2, state: {'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 2 ---> 3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 3, state: {'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 2 ---> 4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 4, state: {'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 3 ---> 35
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 35, state: {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 4 ---> 5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 5, state: {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 5 ---> 6
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 6, state: {'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 5 ---> 7
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 7, state: {'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 6 ---> 34
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 34, state: {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 7 ---> 8
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 8, state: {'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 8 ---> 9
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 9, state: {'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X3', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X3', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X3', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 8 ---> 10
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 10, state: {'loc': 'X3', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 9 ---> 33
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 33, state: {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 10 ---> 11
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 11, state: {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 11 ---> 12
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 12, state: {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 11 ---> 13
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 13, state: {'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 12 ---> 15
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 15, state: {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 13 ---> 14
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 14, state: {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 14 ---> 3
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 3, state: {'loc': 'X7', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 14 ---> 4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 4, state: {'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 15 ---> 16
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 16, state: {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 16 ---> 17
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 17, state: {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 16 ---> 18
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 18, state: {'loc': 'X8', 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 17 ---> 29
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 29, state: {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 18 ---> 19
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 19, state: {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 19 ---> 20
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 20, state: {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 19 ---> 21
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 21, state: {'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 20 ---> 28
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 28, state: {'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 21 ---> 22
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 22, state: {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 22 ---> 0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 0, state: {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 22 ---> 23
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 23, state: {'loc': 'X0', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 23 ---> 24
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 24, state: {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 24 ---> 25
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 25, state: {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 24 ---> 26
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 26, state: {'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 25 ---> 27
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 27, state: {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 26 ---> 16
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 16, state: {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 27 ---> 5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 5, state: {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 28 ---> 11
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 11, state: {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 29 ---> 30
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 30, state: {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 30 ---> 32
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 32, state: {'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 30 ---> 31
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 31, state: {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 31 ---> 33
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 33, state: {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 32 ---> 11
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 11, state: {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 33 ---> 24
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 24, state: {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 34 ---> 22
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 22, state: {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: 35 ---> 19
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
INFO:tulip.synth:node: 19, state: {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Adding new id: Sinit
DEBUG:tulip.transys.labeled_graphs:node typed_attr: TypedDict({})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({})
type definitions: {}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
INFO:tulip.spec.form:convert string variables to integers...
DEBUG:tulip.spec.form:home is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X0") is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home) is in _bool_int cache
DEBUG:tulip.spec.form:!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home) is in _bool_int cache
DEBUG:tulip.spec.form:((obs2) -> X (!obsX3)) is in _bool_int cache
DEBUG:tulip.spec.form:((obs1) -> X (!obsX1)) is in _bool_int cache
DEBUG:tulip.spec.form:((obs4) -> X (!obsX7)) is in _bool_int cache
DEBUG:tulip.spec.form:((obs3) -> X (!obsX5)) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5")))) is in _bool_int cache
DEBUG:tulip.spec.form:(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4")))) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)) is in _bool_int cache
DEBUG:tulip.spec.form:home is in _bool_int cache
DEBUG:tulip.spec.form:goal is in _bool_int cache
DEBUG:tulip.spec.form:((eloc = "a")) -> (((X(eloc = "b")))) is in _bool_int cache
DEBUG:tulip.spec.form:((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d")))) is in _bool_int cache
DEBUG:tulip.spec.form:((eloc = "b")) -> (((X(eloc = "c")))) is in _bool_int cache
DEBUG:tulip.spec.form:((eloc = "d")) -> (((X(eloc = "c")))) is in _bool_int cache
DEBUG:tulip.spec.form:X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3)) is in _bool_int cache
DEBUG:tulip.spec.form:X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1)) is in _bool_int cache
DEBUG:tulip.spec.form:X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1)) is in _bool_int cache
DEBUG:tulip.spec.form:X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1)) is in _bool_int cache
DEBUG:tulip.spec.form:(eloc = "a") is in _bool_int cache
DEBUG:tulip.spec.form:!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3) is in _bool_int cache
DEBUG:tulip.spec.form:!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1) is in _bool_int cache
DEBUG:tulip.spec.form:!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1) is in _bool_int cache
DEBUG:tulip.spec.form:!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1) is in _bool_int cache
INFO:tulip.spec.form:done converting to integer variables.

INFO:tulip.spec.form:clauses to compile: ['home', '( loc = 3 )', '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )', '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )', '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )', '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )', '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )', '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )', '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )', '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )', '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )']
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: home, is in cache.
DEBUG:tulip.spec.form:home is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( loc = 3 ), is in cache.
DEBUG:tulip.spec.form:( loc = 3 ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) is already in cache
INFO:tulip.spec.form:after translation to python: ['home', '( loc == 3 )', '( ( not ( loc == 0 ) ) or ( ( ( ( ( goal and ( not obsX3 ) ) and ( not obsX1 ) ) and ( not obsX7 ) ) and ( not obsX5 ) ) and ( not home ) ) )', '( ( not ( loc == 1 ) ) or ( ( ( ( ( ( not obsX3 ) and ( not obsX1 ) ) and ( not obsX7 ) ) and ( not goal ) ) and ( not obsX5 ) ) and ( not home ) ) )', '( ( not ( loc == 2 ) ) or ( ( ( ( ( obsX3 and ( not obsX1 ) ) and ( not obsX7 ) ) and ( not goal ) ) and ( not obsX5 ) ) and ( not home ) ) )', '( ( not ( loc == 3 ) ) or ( ( ( ( ( home and ( not obsX3 ) ) and ( not obsX1 ) ) and ( not obsX7 ) ) and ( not goal ) ) and ( not obsX5 ) ) )', '( ( not ( loc == 4 ) ) or ( ( ( ( ( obsX1 and ( not obsX3 ) ) and ( not obsX7 ) ) and ( not goal ) ) and ( not obsX5 ) ) and ( not home ) ) )', '( ( not ( loc == 5 ) ) or ( ( ( ( ( ( not obsX3 ) and ( not obsX1 ) ) and ( not obsX7 ) ) and ( not goal ) ) and ( not obsX5 ) ) and ( not home ) ) )', '( ( not ( loc == 6 ) ) or ( ( ( ( ( obsX7 and ( not obsX3 ) ) and ( not obsX1 ) ) and ( not goal ) ) and ( not obsX5 ) ) and ( not home ) ) )', '( ( not ( loc == 7 ) ) or ( ( ( ( ( ( not obsX3 ) and ( not obsX1 ) ) and ( not obsX7 ) ) and ( not goal ) ) and ( not obsX5 ) ) and ( not home ) ) )', '( ( not ( loc == 8 ) ) or ( ( ( ( ( obsX5 and ( not obsX3 ) ) and ( not obsX1 ) ) and ( not obsX7 ) ) and ( not goal ) ) and ( not home ) ) )']
INFO:tulip.spec.form:clauses to compile: ['( eloc = 0 )', '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )', '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )', '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )', '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )']
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( eloc = 0 ), is in cache.
DEBUG:tulip.spec.form:( eloc = 0 ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) is already in cache
DEBUG:tulip.spec.form:current cache of ASTs:
{'!((eloc = "a")) || (obs1 && !obs4 && !obs2 && !obs3)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('a'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '!((eloc = "b")) || (obs2 && !obs4 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('b'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((eloc = "c")) || (obs3 && !obs4 && !obs2 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('c'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '!((eloc = "d")) || (obs4 && !obs2 && !obs3 && !obs1)': Binary('|', Unary('!', Comparator('=', Var('eloc'), Str('d'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '!((loc = "X0")) || (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '!((loc = "X1")) || (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X2")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X3")) || (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X4")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X5")) || (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '!((loc = "X6")) || (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X7")) || (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '!((loc = "X8")) || (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home)': Binary('|', Unary('!', Comparator('=', Var('loc'), Str('X8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( eloc = 0 ) ) | ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('0'))), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3')))),
 '( ( ! ( eloc = 1 ) ) | ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('1'))), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 2 ) ) | ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('2'))), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) )': Binary('|', Unary('!', Comparator('=', Var('eloc'), Num('3'))), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1')))),
 '( ( ! ( loc = 0 ) ) | ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('0'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 1 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('1'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 2 ) ) | ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('2'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 3 ) ) | ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('3'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5')))),
 '( ( ! ( loc = 4 ) ) | ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('4'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 5 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('5'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 6 ) ) | ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('6'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 7 ) ) | ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('7'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home')))),
 '( ( ! ( loc = 8 ) ) | ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) )': Binary('|', Unary('!', Comparator('=', Var('loc'), Num('8'))), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home')))),
 '( ( eloc = 0 ) -> ( X ( eloc = 2 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('0')), Unary('X', Comparator('=', Var('eloc'), Num('2')))),
 '( ( eloc = 1 ) -> ( ( X ( eloc = 0 ) ) | ( X ( eloc = 3 ) ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Num('0'))), Unary('X', Comparator('=', Var('eloc'), Num('3'))))),
 '( ( eloc = 2 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('2')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( eloc = 3 ) -> ( X ( eloc = 1 ) ) )': Binary('->', Comparator('=', Var('eloc'), Num('3')), Unary('X', Comparator('=', Var('eloc'), Num('1')))),
 '( ( loc = 0 ) -> ( ( X ( loc = 6 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('6'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 1 ) -> ( ( X ( loc = 4 ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('4'))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 2 ) -> ( ( ( X ( loc = 3 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('3'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 3 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4'))))),
 '( ( loc = 4 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 3 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('3')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 5 ) -> ( ( X ( loc = 2 ) ) | ( X ( loc = 6 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('6'))))),
 '( ( loc = 6 ) -> ( ( ( X ( loc = 0 ) ) | ( X ( loc = 5 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('0'))), Unary('X', Comparator('=', Var('loc'), Num('5')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( ( loc = 7 ) -> ( ( ( ( X ( loc = 2 ) ) | ( X ( loc = 4 ) ) ) | ( X ( loc = 6 ) ) ) | ( X ( loc = 8 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('2'))), Unary('X', Comparator('=', Var('loc'), Num('4')))), Unary('X', Comparator('=', Var('loc'), Num('6')))), Unary('X', Comparator('=', Var('loc'), Num('8'))))),
 '( ( loc = 8 ) -> ( ( ( X ( loc = 1 ) ) | ( X ( loc = 0 ) ) ) | ( X ( loc = 7 ) ) ) )': Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Num('1'))), Unary('X', Comparator('=', Var('loc'), Num('0')))), Unary('X', Comparator('=', Var('loc'), Num('7'))))),
 '( X ( ( eloc = 0 ) -> ( ( ( obs1 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs3 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('0')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 '( X ( ( eloc = 1 ) -> ( ( ( obs3 & ( ! obs4 ) ) & ( ! obs2 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('1')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 2 ) -> ( ( ( obs2 & ( ! obs4 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('2')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( eloc = 3 ) -> ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('eloc'), Num('3')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 '( X ( ( loc = 0 ) -> ( ( ( ( ( goal & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 1 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 2 ) -> ( ( ( ( ( obsX3 & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 3 ) -> ( ( ( ( ( home & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 '( X ( ( loc = 4 ) -> ( ( ( ( ( obsX1 & ( ! obsX3 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 5 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 6 ) -> ( ( ( ( ( obsX7 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 7 ) -> ( ( ( ( ( ( ! obsX3 ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! obsX5 ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 '( X ( ( loc = 8 ) -> ( ( ( ( ( obsX5 & ( ! obsX3 ) ) & ( ! obsX1 ) ) & ( ! obsX7 ) ) & ( ! goal ) ) & ( ! home ) ) ) )': Unary('X', Binary('->', Comparator('=', Var('loc'), Num('8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 '( eloc = 0 )': Comparator('=', Var('eloc'), Num('0')),
 '( loc = 3 )': Comparator('=', Var('loc'), Num('3')),
 '( obs1 -> ( X ( ! obsX1 ) ) )': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '( obs2 -> ( X ( ! obsX3 ) ) )': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '( obs3 -> ( X ( ! obsX5 ) ) )': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '( obs4 -> ( X ( ! obsX7 ) ) )': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '((eloc = "a")) -> (((X(eloc = "b"))))': Binary('->', Comparator('=', Var('eloc'), Str('a')), Unary('X', Comparator('=', Var('eloc'), Str('b')))),
 '((eloc = "b")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('b')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((eloc = "c")) -> (((X(eloc = "a"))) || ((X(eloc = "d"))))': Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('|', Unary('X', Comparator('=', Var('eloc'), Str('a'))), Unary('X', Comparator('=', Var('eloc'), Str('d'))))),
 '((eloc = "d")) -> (((X(eloc = "c"))))': Binary('->', Comparator('=', Var('eloc'), Str('d')), Unary('X', Comparator('=', Var('eloc'), Str('c')))),
 '((obs1) -> X (!obsX1))': Binary('->', Var('obs1'), Unary('X', Unary('!', Var('obsX1')))),
 '((obs2) -> X (!obsX3))': Binary('->', Var('obs2'), Unary('X', Unary('!', Var('obsX3')))),
 '((obs3) -> X (!obsX5))': Binary('->', Var('obs3'), Unary('X', Unary('!', Var('obsX5')))),
 '((obs4) -> X (!obsX7))': Binary('->', Var('obs4'), Unary('X', Unary('!', Var('obsX7')))),
 '(eloc = "a")': Comparator('=', Var('eloc'), Str('a')),
 '(loc = "X0")': Comparator('=', Var('loc'), Str('X0')),
 '(loc = "X0") -> (((X(loc = "X3"))) || ((X(loc = "X1"))))': Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1'))))),
 '(loc = "X1") -> (((X(loc = "X2"))) || ((X(loc = "X0"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X0')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X2") -> (((X(loc = "X1"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X1'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X3") -> (((X(loc = "X0"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X0'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X4") -> (((X(loc = "X3"))) || ((X(loc = "X1"))) || ((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('|', Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X1')))), Unary('X', Comparator('=', Var('loc'), Str('X7')))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 '(loc = "X5") -> (((X(loc = "X2"))) || ((X(loc = "X8"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X2'))), Unary('X', Comparator('=', Var('loc'), Str('X8')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X6") -> (((X(loc = "X3"))) || ((X(loc = "X7"))))': Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X3'))), Unary('X', Comparator('=', Var('loc'), Str('X7'))))),
 '(loc = "X7") -> (((X(loc = "X8"))) || ((X(loc = "X6"))) || ((X(loc = "X4"))))': Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('|', Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X8'))), Unary('X', Comparator('=', Var('loc'), Str('X6')))), Unary('X', Comparator('=', Var('loc'), Str('X4'))))),
 '(loc = "X8") -> (((X(loc = "X7"))) || ((X(loc = "X5"))))': Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('|', Unary('X', Comparator('=', Var('loc'), Str('X7'))), Unary('X', Comparator('=', Var('loc'), Str('X5'))))),
 'X((eloc = "a") -> (obs1 && !obs4 && !obs2 && !obs3))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('a')), Binary('&', Binary('&', Binary('&', Var('obs1'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))))),
 'X((eloc = "b") -> (obs2 && !obs4 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('b')), Binary('&', Binary('&', Binary('&', Var('obs2'), Unary('!', Var('obs4'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((eloc = "c") -> (obs3 && !obs4 && !obs2 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('c')), Binary('&', Binary('&', Binary('&', Var('obs3'), Unary('!', Var('obs4'))), Unary('!', Var('obs2'))), Unary('!', Var('obs1'))))),
 'X((eloc = "d") -> (obs4 && !obs2 && !obs3 && !obs1))': Unary('X', Binary('->', Comparator('=', Var('eloc'), Str('d')), Binary('&', Binary('&', Binary('&', Var('obs4'), Unary('!', Var('obs2'))), Unary('!', Var('obs3'))), Unary('!', Var('obs1'))))),
 'X((loc = "X0") -> (home && !obsX3 && !obsX1 && !obsX7 && !goal && !obsX5))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X0')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('home'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))))),
 'X((loc = "X1") -> (obsX1 && !obsX3 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X1')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX1'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X2") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X2')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X3") -> (obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X3')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX3'), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X4") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X4')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X5") -> (obsX5 && !obsX3 && !obsX1 && !obsX7 && !goal && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X5')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX5'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('home'))))),
 'X((loc = "X6") -> (!obsX3 && !obsX1 && !obsX7 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X6')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Unary('!', Var('obsX3')), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X7") -> (obsX7 && !obsX3 && !obsX1 && !goal && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X7')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('obsX7'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('goal'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'X((loc = "X8") -> (goal && !obsX3 && !obsX1 && !obsX7 && !obsX5 && !home))': Unary('X', Binary('->', Comparator('=', Var('loc'), Str('X8')), Binary('&', Binary('&', Binary('&', Binary('&', Binary('&', Var('goal'), Unary('!', Var('obsX3'))), Unary('!', Var('obsX1'))), Unary('!', Var('obsX7'))), Unary('!', Var('obsX5'))), Unary('!', Var('home'))))),
 'goal': Var('goal'),
 'home': Var('home')}



DEBUG:tulip.spec.form:check if: ( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ), is in cache.
DEBUG:tulip.spec.form:( ( ! ( eloc = 3 ) ) | ( ( ( obs4 & ( ! obs2 ) ) & ( ! obs3 ) ) & ( ! obs1 ) ) ) is already in cache
INFO:tulip.spec.form:after translation to python: ['( eloc == 0 )', '( ( not ( eloc == 0 ) ) or ( ( ( obs1 and ( not obs4 ) ) and ( not obs2 ) ) and ( not obs3 ) ) )', '( ( not ( eloc == 1 ) ) or ( ( ( obs3 and ( not obs4 ) ) and ( not obs2 ) ) and ( not obs1 ) ) )', '( ( not ( eloc == 2 ) ) or ( ( ( obs2 and ( not obs4 ) ) and ( not obs3 ) ) and ( not obs1 ) ) )', '( ( not ( eloc == 3 ) ) or ( ( ( obs4 and ( not obs2 ) ) and ( not obs3 ) ) and ( not obs1 ) ) )']
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'a', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 0
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 0
DEBUG:tulip.synth:machine vertex: 0, has var values: {'loc': 3, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X3', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 1
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 1
DEBUG:tulip.synth:machine vertex: 1, has var values: {'loc': 2, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X6', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 2
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 2
DEBUG:tulip.synth:machine vertex: 2, has var values: {'loc': 5, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False}
DEBUG:tulip.synth:machine vertex: 3, has var values: {'loc': 6, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X7', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 4
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 4
DEBUG:tulip.synth:machine vertex: 4, has var values: {'loc': 6, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 3, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 5
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 5
DEBUG:tulip.synth:machine vertex: 5, has var values: {'loc': 0, 'goal': True, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False}
DEBUG:tulip.synth:machine vertex: 6, has var values: {'loc': 6, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': True, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.synth:machine vertex: 9, has var values: {'loc': 2, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X3', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X3', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X3', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 10
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 10
DEBUG:tulip.synth:machine vertex: 10, has var values: {'loc': 2, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': True, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 11
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 11
DEBUG:tulip.synth:machine vertex: 11, has var values: {'loc': 3, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': True}
DEBUG:tulip.synth:machine vertex: 12, has var values: {'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 13
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 13
DEBUG:tulip.synth:machine vertex: 13, has var values: {'loc': 4, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 14
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 14
DEBUG:tulip.synth:machine vertex: 14, has var values: {'loc': 7, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 15
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 15
DEBUG:tulip.synth:machine vertex: 15, has var values: {'loc': 1, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 16
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 16
DEBUG:tulip.synth:machine vertex: 16, has var values: {'loc': 8, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': True, 'home': False}
DEBUG:tulip.synth:machine vertex: 17, has var values: {'loc': 0, 'goal': True, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 18
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 18
DEBUG:tulip.synth:machine vertex: 18, has var values: {'loc': 0, 'goal': True, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False}
DEBUG:tulip.synth:machine vertex: 20, has var values: {'loc': 7, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 21
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 21
DEBUG:tulip.synth:machine vertex: 21, has var values: {'loc': 1, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X1', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 22
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 22
DEBUG:tulip.synth:machine vertex: 22, has var values: {'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'd', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 23
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 23
DEBUG:tulip.synth:machine vertex: 23, has var values: {'loc': 3, 'goal': False, 'obs4': True, 'obs2': False, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 3, 'obsX5': False, 'home': True}
DEBUG:tulip.synth:machine vertex: 25, has var values: {'loc': 1, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X5', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': True, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 27
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 27
DEBUG:tulip.synth:machine vertex: 27, has var values: {'loc': 8, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': True, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X2', 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'c', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 30
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 30
DEBUG:tulip.synth:machine vertex: 30, has var values: {'loc': 1, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': True, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 1, 'obsX5': False, 'home': False}
DEBUG:tulip.synth:machine vertex: 31, has var values: {'loc': 4, 'goal': False, 'obs4': False, 'obs2': False, 'obs3': False, 'obs1': True, 'obsX3': False, 'obsX1': True, 'obsX7': False, 'eloc': 0, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X0', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': True})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 33
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 33
DEBUG:tulip.synth:machine vertex: 33, has var values: {'loc': 3, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': True}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X4', 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 34
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 34
DEBUG:tulip.synth:machine vertex: 34, has var values: {'loc': 7, 'goal': False, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Given: attr_dict = {'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False}
DEBUG:tulip.transys.labeled_graphs:Stored in: typed_attr = TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
DEBUG:tulip.transys.labeled_graphs:checking for untyped keys...
attribute dict: TypedDict({'loc': 'X8', 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 'b', 'obsX5': False, 'home': False})
type definitions: {'loc': set(['X8', 'X2', 'X3', 'X0', 'X1', 'X6', 'X7', 'X4', 'X5']), 'goal': set([0, 1]), 'obs4': set([0, 1]), 'obs2': set([0, 1]), 'obs3': set([0, 1]), 'obs1': set([0, 1]), 'obsX3': set([0, 1]), 'obsX1': set([0, 1]), 'obsX7': set([0, 1]), 'eloc': set(['a', 'c', 'b', 'd']), 'obsX5': set([0, 1]), 'home': set([0, 1])}
untyped_keys: set([])
DEBUG:tulip.transys.labeled_graphs:no untyped keys.
DEBUG:tulip.transys.labeled_graphs:adding edge: Sinit ---> 35
DEBUG:tulip.transys.labeled_graphs:first directed edge between these nodes
DEBUG:tulip.synth:found initial state: 35
DEBUG:tulip.synth:machine vertex: 35, has var values: {'loc': 0, 'goal': True, 'obs4': False, 'obs2': True, 'obs3': False, 'obs1': False, 'obsX3': False, 'obsX1': False, 'obsX7': False, 'eloc': 2, 'obsX5': False, 'home': False}
DEBUG:tulip.synth:Mealy machine has: n = 37 states.
