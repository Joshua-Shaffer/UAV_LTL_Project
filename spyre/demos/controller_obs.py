class ExampleCtrl(object):
    """Mealy transducer.

    Internal states are integers, the current state
    is stored in the attribute "state".
    To take a transition, call method "move".

    The names of input variables are stored in the
    attribute "input_vars".

    Automatically generated by tulip.dumpsmach on 2017-09-25 18:03:52 UTC
    To learn more about TuLiP, visit http://tulip-control.org
    """
    def __init__(self):
        self.state = 12
        self.input_vars = ['obs_a']

    def move(self, obs_a):
        """Given inputs, take move and return outputs.

        @rtype: dict
        @return: dictionary with keys of the output variable names:
            ['loc', 'goal', 'obsX1', 'obsX6', 'obsX5', 'home']
        """
        output = dict()
        if self.state == 0:
            if (obs_a == 1):
                self.state = 1

                output["loc"] = 'X3'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 1:
            if (obs_a == 2):
                self.state = 2

                output["loc"] = 'X0'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = True
            else:
                self._error(obs_a)
        elif self.state == 2:
            if (obs_a == 0):
                self.state = 3

                output["loc"] = 'X1'
                output["goal"] = False
                output["obsX1"] = True
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 3:
            if (obs_a == 1):
                self.state = 4

                output["loc"] = 'X2'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 4:
            if (obs_a == 2):
                self.state = 5

                output["loc"] = 'X5'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = True
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 5:
            if (obs_a == 0):
                self.state = 6

                output["loc"] = 'X2'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 6:
            if (obs_a == 1):
                self.state = 7

                output["loc"] = 'X5'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = True
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 7:
            if (obs_a == 2):
                self.state = 8

                output["loc"] = 'X8'
                output["goal"] = True
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 8:
            if (obs_a == 0):
                self.state = 9

                output["loc"] = 'X7'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 9:
            if (obs_a == 1):
                self.state = 10

                output["loc"] = 'X6'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = True
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 10:
            if (obs_a == 2):
                self.state = 11

                output["loc"] = 'X3'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        elif self.state == 11:
            if (obs_a == 0):
                self.state = 0

                output["loc"] = 'X0'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = True
            else:
                self._error(obs_a)
        elif self.state == 12:
            if (obs_a == 0):
                self.state = 0

                output["loc"] = 'X0'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = True
            elif (obs_a == 1):
                self.state = 1

                output["loc"] = 'X3'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            elif (obs_a == 2):
                self.state = 2

                output["loc"] = 'X0'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = True
            elif (obs_a == 1):
                self.state = 4

                output["loc"] = 'X2'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            elif (obs_a == 2):
                self.state = 5

                output["loc"] = 'X5'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = True
                output["home"] = False
            elif (obs_a == 1):
                self.state = 7

                output["loc"] = 'X5'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = True
                output["home"] = False
            elif (obs_a == 2):
                self.state = 8

                output["loc"] = 'X8'
                output["goal"] = True
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            elif (obs_a == 1):
                self.state = 10

                output["loc"] = 'X6'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = True
                output["obsX5"] = False
                output["home"] = False
            elif (obs_a == 2):
                self.state = 11

                output["loc"] = 'X3'
                output["goal"] = False
                output["obsX1"] = False
                output["obsX6"] = False
                output["obsX5"] = False
                output["home"] = False
            else:
                self._error(obs_a)
        else:
            raise Exception("Unrecognized internal state: " + str(self.state))
        return output

    def _error(self, obs_a):
        raise ValueError("Unrecognized input: " + (
            "obs_a = {obs_a}; ").format(
                obs_a=obs_a))
